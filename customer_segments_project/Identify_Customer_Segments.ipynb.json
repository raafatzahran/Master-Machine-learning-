{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Project: Identify Customer Segments\n",
    "\n",
    "In this project, you will apply unsupervised learning techniques to identify segments of the population that form the core customer base for a mail-order sales company in Germany. These segments can then be used to direct marketing campaigns towards audiences that will have the highest expected rate of returns. The data that you will use has been provided by our partners at Bertelsmann Arvato Analytics, and represents a real-life data science task.\n",
    "\n",
    "This notebook will help you complete this task by providing a framework within which you will perform your analysis steps. In each step of the project, you will see some text describing the subtask that you will perform, followed by one or more code cells for you to complete your work. **Feel free to add additional code and markdown cells as you go along so that you can explore everything in precise chunks.** The code cells provided in the base template will outline only the major tasks, and will usually not be enough to cover all of the minor tasks that comprise it.\n",
    "\n",
    "It should be noted that while there will be precise guidelines on how you should handle certain tasks in the project, there will also be places where an exact specification is not provided. **There will be times in the project where you will need to make and justify your own decisions on how to treat the data.** These are places where there may not be only one way to handle the data. In real-life tasks, there may be many valid ways to approach an analysis task. One of the most important things you can do is clearly document your approach so that other scientists can understand the decisions you've made.\n",
    "\n",
    "At the end of most sections, there will be a Markdown cell labeled **Discussion**. In these cells, you will report your findings for the completed section, as well as document the decisions that you made in your approach to each subtask. **Your project will be evaluated not just on the code used to complete the tasks outlined, but also your communication about your observations and conclusions at each stage.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {},
   "outputs": [],
   "source": [
    "# import libraries here; add more as necessary\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import ast\n",
    "from sklearn.preprocessing import Imputer\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.decomposition import PCA\n",
    "from sklearn.cluster import KMeans\n",
    "\n",
    "# magic word for producing visualizations in notebook\n",
    "%matplotlib inline\n",
    "\n",
    "seed = 1234567"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Step 0: Load the Data\n",
    "\n",
    "There are four files associated with this project (not including this one):\n",
    "\n",
    "- `Udacity_AZDIAS_Subset.csv`: Demographics data for the general population of Germany; 891211 persons (rows) x 85 features (columns).\n",
    "- `Udacity_CUSTOMERS_Subset.csv`: Demographics data for customers of a mail-order company; 191652 persons (rows) x 85 features (columns).\n",
    "- `Data_Dictionary.md`: Detailed information file about the features in the provided datasets.\n",
    "- `AZDIAS_Feature_Summary.csv`: Summary of feature attributes for demographics data; 85 features (rows) x 4 columns\n",
    "\n",
    "Each row of the demographics files represents a single person, but also includes information outside of individuals, including information about their household, building, and neighborhood. You will use this information to cluster the general population into groups with similar demographic properties. Then, you will see how the people in the customers dataset fit into those created clusters. The hope here is that certain clusters are over-represented in the customers data, as compared to the general population; those over-represented clusters will be assumed to be part of the core userbase. This information can then be used for further applications, such as targeting for a marketing campaign.\n",
    "\n",
    "To start off with, load in the demographics data for the general population into a pandas DataFrame, and do the same for the feature attributes summary. Note for all of the `.csv` data files in this project: they're semicolon (`;`) delimited, so you'll need an additional argument in your [`read_csv()`](https://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_csv.html) call to read in the data properly. Also, considering the size of the main dataset, it may take some time for it to load completely.\n",
    "\n",
    "Once the dataset is loaded, it's recommended that you take a little bit of time just browsing the general structure of the dataset and feature summary file. You'll be getting deep into the innards of the cleaning in the first major step of the project, so gaining some general familiarity can help you get your bearings."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load in the general demographics data.\n",
    "azdias = pd.read_csv('Udacity_AZDIAS_Subset.csv',delimiter=';')\n",
    "\n",
    "# Load in the feature summary file.\n",
    "feat_info = pd.read_csv('AZDIAS_Feature_Summary.csv',delimiter=';')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### browsing the general structure of the dataset and feature summary file:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(891221, 85)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check the structure of the data after it's loaded (e.g. print the number of\n",
    "# rows and columns, print the first few rows).\n",
    "azdias.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>AGER_TYP</th>\n",
       "      <th>ALTERSKATEGORIE_GROB</th>\n",
       "      <th>ANREDE_KZ</th>\n",
       "      <th>CJT_GESAMTTYP</th>\n",
       "      <th>FINANZ_MINIMALIST</th>\n",
       "      <th>FINANZ_SPARER</th>\n",
       "      <th>FINANZ_VORSORGER</th>\n",
       "      <th>FINANZ_ANLEGER</th>\n",
       "      <th>FINANZ_UNAUFFAELLIGER</th>\n",
       "      <th>FINANZ_HAUSBAUER</th>\n",
       "      <th>...</th>\n",
       "      <th>PLZ8_ANTG1</th>\n",
       "      <th>PLZ8_ANTG2</th>\n",
       "      <th>PLZ8_ANTG3</th>\n",
       "      <th>PLZ8_ANTG4</th>\n",
       "      <th>PLZ8_BAUMAX</th>\n",
       "      <th>PLZ8_HHZ</th>\n",
       "      <th>PLZ8_GBZ</th>\n",
       "      <th>ARBEIT</th>\n",
       "      <th>ORTSGR_KLS9</th>\n",
       "      <th>RELAT_AB</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>...</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-1</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>...</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>5.0</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>2.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 85 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   AGER_TYP  ALTERSKATEGORIE_GROB  ANREDE_KZ  CJT_GESAMTTYP  \\\n",
       "0        -1                     2          1            2.0   \n",
       "1        -1                     1          2            5.0   \n",
       "2        -1                     3          2            3.0   \n",
       "3         2                     4          2            2.0   \n",
       "4        -1                     3          1            5.0   \n",
       "\n",
       "   FINANZ_MINIMALIST  FINANZ_SPARER  FINANZ_VORSORGER  FINANZ_ANLEGER  \\\n",
       "0                  3              4                 3               5   \n",
       "1                  1              5                 2               5   \n",
       "2                  1              4                 1               2   \n",
       "3                  4              2                 5               2   \n",
       "4                  4              3                 4               1   \n",
       "\n",
       "   FINANZ_UNAUFFAELLIGER  FINANZ_HAUSBAUER    ...     PLZ8_ANTG1  PLZ8_ANTG2  \\\n",
       "0                      5                 3    ...            NaN         NaN   \n",
       "1                      4                 5    ...            2.0         3.0   \n",
       "2                      3                 5    ...            3.0         3.0   \n",
       "3                      1                 2    ...            2.0         2.0   \n",
       "4                      3                 2    ...            2.0         4.0   \n",
       "\n",
       "   PLZ8_ANTG3  PLZ8_ANTG4  PLZ8_BAUMAX  PLZ8_HHZ  PLZ8_GBZ  ARBEIT  \\\n",
       "0         NaN         NaN          NaN       NaN       NaN     NaN   \n",
       "1         2.0         1.0          1.0       5.0       4.0     3.0   \n",
       "2         1.0         0.0          1.0       4.0       4.0     3.0   \n",
       "3         2.0         0.0          1.0       3.0       4.0     2.0   \n",
       "4         2.0         1.0          2.0       3.0       3.0     4.0   \n",
       "\n",
       "   ORTSGR_KLS9  RELAT_AB  \n",
       "0          NaN       NaN  \n",
       "1          5.0       4.0  \n",
       "2          5.0       2.0  \n",
       "3          3.0       3.0  \n",
       "4          6.0       5.0  \n",
       "\n",
       "[5 rows x 85 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "azdias.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 891221 entries, 0 to 891220\n",
      "Data columns (total 85 columns):\n",
      "AGER_TYP                 891221 non-null int64\n",
      "ALTERSKATEGORIE_GROB     891221 non-null int64\n",
      "ANREDE_KZ                891221 non-null int64\n",
      "CJT_GESAMTTYP            886367 non-null float64\n",
      "FINANZ_MINIMALIST        891221 non-null int64\n",
      "FINANZ_SPARER            891221 non-null int64\n",
      "FINANZ_VORSORGER         891221 non-null int64\n",
      "FINANZ_ANLEGER           891221 non-null int64\n",
      "FINANZ_UNAUFFAELLIGER    891221 non-null int64\n",
      "FINANZ_HAUSBAUER         891221 non-null int64\n",
      "FINANZTYP                891221 non-null int64\n",
      "GEBURTSJAHR              891221 non-null int64\n",
      "GFK_URLAUBERTYP          886367 non-null float64\n",
      "GREEN_AVANTGARDE         891221 non-null int64\n",
      "HEALTH_TYP               891221 non-null int64\n",
      "LP_LEBENSPHASE_FEIN      886367 non-null float64\n",
      "LP_LEBENSPHASE_GROB      886367 non-null float64\n",
      "LP_FAMILIE_FEIN          886367 non-null float64\n",
      "LP_FAMILIE_GROB          886367 non-null float64\n",
      "LP_STATUS_FEIN           886367 non-null float64\n",
      "LP_STATUS_GROB           886367 non-null float64\n",
      "NATIONALITAET_KZ         891221 non-null int64\n",
      "PRAEGENDE_JUGENDJAHRE    891221 non-null int64\n",
      "RETOURTYP_BK_S           886367 non-null float64\n",
      "SEMIO_SOZ                891221 non-null int64\n",
      "SEMIO_FAM                891221 non-null int64\n",
      "SEMIO_REL                891221 non-null int64\n",
      "SEMIO_MAT                891221 non-null int64\n",
      "SEMIO_VERT               891221 non-null int64\n",
      "SEMIO_LUST               891221 non-null int64\n",
      "SEMIO_ERL                891221 non-null int64\n",
      "SEMIO_KULT               891221 non-null int64\n",
      "SEMIO_RAT                891221 non-null int64\n",
      "SEMIO_KRIT               891221 non-null int64\n",
      "SEMIO_DOM                891221 non-null int64\n",
      "SEMIO_KAEM               891221 non-null int64\n",
      "SEMIO_PFLICHT            891221 non-null int64\n",
      "SEMIO_TRADV              891221 non-null int64\n",
      "SHOPPER_TYP              891221 non-null int64\n",
      "SOHO_KZ                  817722 non-null float64\n",
      "TITEL_KZ                 817722 non-null float64\n",
      "VERS_TYP                 891221 non-null int64\n",
      "ZABEOTYP                 891221 non-null int64\n",
      "ALTER_HH                 817722 non-null float64\n",
      "ANZ_PERSONEN             817722 non-null float64\n",
      "ANZ_TITEL                817722 non-null float64\n",
      "HH_EINKOMMEN_SCORE       872873 non-null float64\n",
      "KK_KUNDENTYP             306609 non-null float64\n",
      "W_KEIT_KIND_HH           783619 non-null float64\n",
      "WOHNDAUER_2008           817722 non-null float64\n",
      "ANZ_HAUSHALTE_AKTIV      798073 non-null float64\n",
      "ANZ_HH_TITEL             794213 non-null float64\n",
      "GEBAEUDETYP              798073 non-null float64\n",
      "KONSUMNAEHE              817252 non-null float64\n",
      "MIN_GEBAEUDEJAHR         798073 non-null float64\n",
      "OST_WEST_KZ              798073 non-null object\n",
      "WOHNLAGE                 798073 non-null float64\n",
      "CAMEO_DEUG_2015          792242 non-null object\n",
      "CAMEO_DEU_2015           792242 non-null object\n",
      "CAMEO_INTL_2015          792242 non-null object\n",
      "KBA05_ANTG1              757897 non-null float64\n",
      "KBA05_ANTG2              757897 non-null float64\n",
      "KBA05_ANTG3              757897 non-null float64\n",
      "KBA05_ANTG4              757897 non-null float64\n",
      "KBA05_BAUMAX             757897 non-null float64\n",
      "KBA05_GBZ                757897 non-null float64\n",
      "BALLRAUM                 797481 non-null float64\n",
      "EWDICHTE                 797481 non-null float64\n",
      "INNENSTADT               797481 non-null float64\n",
      "GEBAEUDETYP_RASTER       798066 non-null float64\n",
      "KKK                      770025 non-null float64\n",
      "MOBI_REGIO               757897 non-null float64\n",
      "ONLINE_AFFINITAET        886367 non-null float64\n",
      "REGIOTYP                 770025 non-null float64\n",
      "KBA13_ANZAHL_PKW         785421 non-null float64\n",
      "PLZ8_ANTG1               774706 non-null float64\n",
      "PLZ8_ANTG2               774706 non-null float64\n",
      "PLZ8_ANTG3               774706 non-null float64\n",
      "PLZ8_ANTG4               774706 non-null float64\n",
      "PLZ8_BAUMAX              774706 non-null float64\n",
      "PLZ8_HHZ                 774706 non-null float64\n",
      "PLZ8_GBZ                 774706 non-null float64\n",
      "ARBEIT                   794005 non-null float64\n",
      "ORTSGR_KLS9              794005 non-null float64\n",
      "RELAT_AB                 794005 non-null float64\n",
      "dtypes: float64(49), int64(32), object(4)\n",
      "memory usage: 578.0+ MB\n"
     ]
    }
   ],
   "source": [
    "azdias.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>AGER_TYP</th>\n",
       "      <th>ALTERSKATEGORIE_GROB</th>\n",
       "      <th>ANREDE_KZ</th>\n",
       "      <th>CJT_GESAMTTYP</th>\n",
       "      <th>FINANZ_MINIMALIST</th>\n",
       "      <th>FINANZ_SPARER</th>\n",
       "      <th>FINANZ_VORSORGER</th>\n",
       "      <th>FINANZ_ANLEGER</th>\n",
       "      <th>FINANZ_UNAUFFAELLIGER</th>\n",
       "      <th>FINANZ_HAUSBAUER</th>\n",
       "      <th>...</th>\n",
       "      <th>PLZ8_ANTG1</th>\n",
       "      <th>PLZ8_ANTG2</th>\n",
       "      <th>PLZ8_ANTG3</th>\n",
       "      <th>PLZ8_ANTG4</th>\n",
       "      <th>PLZ8_BAUMAX</th>\n",
       "      <th>PLZ8_HHZ</th>\n",
       "      <th>PLZ8_GBZ</th>\n",
       "      <th>ARBEIT</th>\n",
       "      <th>ORTSGR_KLS9</th>\n",
       "      <th>RELAT_AB</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>891221.000000</td>\n",
       "      <td>891221.000000</td>\n",
       "      <td>891221.000000</td>\n",
       "      <td>886367.000000</td>\n",
       "      <td>891221.000000</td>\n",
       "      <td>891221.000000</td>\n",
       "      <td>891221.000000</td>\n",
       "      <td>891221.000000</td>\n",
       "      <td>891221.000000</td>\n",
       "      <td>891221.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>774706.000000</td>\n",
       "      <td>774706.000000</td>\n",
       "      <td>774706.000000</td>\n",
       "      <td>774706.000000</td>\n",
       "      <td>774706.000000</td>\n",
       "      <td>774706.000000</td>\n",
       "      <td>774706.000000</td>\n",
       "      <td>794005.000000</td>\n",
       "      <td>794005.000000</td>\n",
       "      <td>794005.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>-0.358435</td>\n",
       "      <td>2.777398</td>\n",
       "      <td>1.522098</td>\n",
       "      <td>3.632838</td>\n",
       "      <td>3.074528</td>\n",
       "      <td>2.821039</td>\n",
       "      <td>3.401106</td>\n",
       "      <td>3.033328</td>\n",
       "      <td>2.874167</td>\n",
       "      <td>3.075121</td>\n",
       "      <td>...</td>\n",
       "      <td>2.253330</td>\n",
       "      <td>2.801858</td>\n",
       "      <td>1.595426</td>\n",
       "      <td>0.699166</td>\n",
       "      <td>1.943913</td>\n",
       "      <td>3.612821</td>\n",
       "      <td>3.381087</td>\n",
       "      <td>3.167854</td>\n",
       "      <td>5.293002</td>\n",
       "      <td>3.07222</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.198724</td>\n",
       "      <td>1.068775</td>\n",
       "      <td>0.499512</td>\n",
       "      <td>1.595021</td>\n",
       "      <td>1.321055</td>\n",
       "      <td>1.464749</td>\n",
       "      <td>1.322134</td>\n",
       "      <td>1.529603</td>\n",
       "      <td>1.486731</td>\n",
       "      <td>1.353248</td>\n",
       "      <td>...</td>\n",
       "      <td>0.972008</td>\n",
       "      <td>0.920309</td>\n",
       "      <td>0.986736</td>\n",
       "      <td>0.727137</td>\n",
       "      <td>1.459654</td>\n",
       "      <td>0.973967</td>\n",
       "      <td>1.111598</td>\n",
       "      <td>1.002376</td>\n",
       "      <td>2.303739</td>\n",
       "      <td>1.36298</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>-1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>-1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>2.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>-1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>3.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>-1.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>4.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>3.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>9.00000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows × 81 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            AGER_TYP  ALTERSKATEGORIE_GROB      ANREDE_KZ  CJT_GESAMTTYP  \\\n",
       "count  891221.000000         891221.000000  891221.000000  886367.000000   \n",
       "mean       -0.358435              2.777398       1.522098       3.632838   \n",
       "std         1.198724              1.068775       0.499512       1.595021   \n",
       "min        -1.000000              1.000000       1.000000       1.000000   \n",
       "25%        -1.000000              2.000000       1.000000       2.000000   \n",
       "50%        -1.000000              3.000000       2.000000       4.000000   \n",
       "75%        -1.000000              4.000000       2.000000       5.000000   \n",
       "max         3.000000              9.000000       2.000000       6.000000   \n",
       "\n",
       "       FINANZ_MINIMALIST  FINANZ_SPARER  FINANZ_VORSORGER  FINANZ_ANLEGER  \\\n",
       "count      891221.000000  891221.000000     891221.000000   891221.000000   \n",
       "mean            3.074528       2.821039          3.401106        3.033328   \n",
       "std             1.321055       1.464749          1.322134        1.529603   \n",
       "min             1.000000       1.000000          1.000000        1.000000   \n",
       "25%             2.000000       1.000000          3.000000        2.000000   \n",
       "50%             3.000000       3.000000          3.000000        3.000000   \n",
       "75%             4.000000       4.000000          5.000000        5.000000   \n",
       "max             5.000000       5.000000          5.000000        5.000000   \n",
       "\n",
       "       FINANZ_UNAUFFAELLIGER  FINANZ_HAUSBAUER      ...          PLZ8_ANTG1  \\\n",
       "count          891221.000000     891221.000000      ...       774706.000000   \n",
       "mean                2.874167          3.075121      ...            2.253330   \n",
       "std                 1.486731          1.353248      ...            0.972008   \n",
       "min                 1.000000          1.000000      ...            0.000000   \n",
       "25%                 2.000000          2.000000      ...            1.000000   \n",
       "50%                 3.000000          3.000000      ...            2.000000   \n",
       "75%                 4.000000          4.000000      ...            3.000000   \n",
       "max                 5.000000          5.000000      ...            4.000000   \n",
       "\n",
       "          PLZ8_ANTG2     PLZ8_ANTG3     PLZ8_ANTG4    PLZ8_BAUMAX  \\\n",
       "count  774706.000000  774706.000000  774706.000000  774706.000000   \n",
       "mean        2.801858       1.595426       0.699166       1.943913   \n",
       "std         0.920309       0.986736       0.727137       1.459654   \n",
       "min         0.000000       0.000000       0.000000       1.000000   \n",
       "25%         2.000000       1.000000       0.000000       1.000000   \n",
       "50%         3.000000       2.000000       1.000000       1.000000   \n",
       "75%         3.000000       2.000000       1.000000       3.000000   \n",
       "max         4.000000       3.000000       2.000000       5.000000   \n",
       "\n",
       "            PLZ8_HHZ       PLZ8_GBZ         ARBEIT    ORTSGR_KLS9  \\\n",
       "count  774706.000000  774706.000000  794005.000000  794005.000000   \n",
       "mean        3.612821       3.381087       3.167854       5.293002   \n",
       "std         0.973967       1.111598       1.002376       2.303739   \n",
       "min         1.000000       1.000000       1.000000       0.000000   \n",
       "25%         3.000000       3.000000       3.000000       4.000000   \n",
       "50%         4.000000       3.000000       3.000000       5.000000   \n",
       "75%         4.000000       4.000000       4.000000       7.000000   \n",
       "max         5.000000       5.000000       9.000000       9.000000   \n",
       "\n",
       "           RELAT_AB  \n",
       "count  794005.00000  \n",
       "mean        3.07222  \n",
       "std         1.36298  \n",
       "min         1.00000  \n",
       "25%         2.00000  \n",
       "50%         3.00000  \n",
       "75%         4.00000  \n",
       "max         9.00000  \n",
       "\n",
       "[8 rows x 81 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "azdias.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(85, 4)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "feat_info.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>attribute</th>\n",
       "      <th>information_level</th>\n",
       "      <th>type</th>\n",
       "      <th>missing_or_unknown</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>AGER_TYP</td>\n",
       "      <td>person</td>\n",
       "      <td>categorical</td>\n",
       "      <td>[-1,0]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ALTERSKATEGORIE_GROB</td>\n",
       "      <td>person</td>\n",
       "      <td>ordinal</td>\n",
       "      <td>[-1,0,9]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>ANREDE_KZ</td>\n",
       "      <td>person</td>\n",
       "      <td>categorical</td>\n",
       "      <td>[-1,0]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>CJT_GESAMTTYP</td>\n",
       "      <td>person</td>\n",
       "      <td>categorical</td>\n",
       "      <td>[0]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>FINANZ_MINIMALIST</td>\n",
       "      <td>person</td>\n",
       "      <td>ordinal</td>\n",
       "      <td>[-1]</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              attribute information_level         type missing_or_unknown\n",
       "0              AGER_TYP            person  categorical             [-1,0]\n",
       "1  ALTERSKATEGORIE_GROB            person      ordinal           [-1,0,9]\n",
       "2             ANREDE_KZ            person  categorical             [-1,0]\n",
       "3         CJT_GESAMTTYP            person  categorical                [0]\n",
       "4     FINANZ_MINIMALIST            person      ordinal               [-1]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "feat_info.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> **Tip**: Add additional cells to keep everything in reasonably-sized chunks! Keyboard shortcut `esc --> a` (press escape to enter command mode, then press the 'A' key) adds a new cell before the active cell, and `esc --> b` adds a new cell after the active cell. If you need to convert an active cell to a markdown cell, use `esc --> m` and to convert to a code cell, use `esc --> y`. \n",
    "\n",
    "## Step 1: Preprocessing\n",
    "\n",
    "### Step 1.1: Assess Missing Data\n",
    "\n",
    "The feature summary file contains a summary of properties for each demographics data column. You will use this file to help you make cleaning decisions during this stage of the project. First of all, you should assess the demographics data in terms of missing data. Pay attention to the following points as you perform your analysis, and take notes on what you observe. Make sure that you fill in the **Discussion** cell with your findings and decisions at the end of each step that has one!\n",
    "\n",
    "#### Step 1.1.1: Convert Missing Value Codes to NaNs\n",
    "The fourth column of the feature attributes summary (loaded in above as `feat_info`) documents the codes from the data dictionary that indicate missing or unknown data. While the file encodes this as a list (e.g. `[-1,0]`), this will get read in as a string object. You'll need to do a little bit of parsing to make use of it to identify and clean the data. Convert data that matches a 'missing' or 'unknown' value code into a numpy NaN value. You might want to see how much data takes on a 'missing' or 'unknown' code, and how much data is naturally missing, as a point of interest.\n",
    "\n",
    "**As one more reminder, you are encouraged to add additional cells to break up your analysis into manageable chunks.**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Investigate patterns in the amount of missing data in each column."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "unknown_dict = {}\n",
    "for feature_name, unknown_list_string in zip(feat_info['attribute'], feat_info['missing_or_unknown']):\n",
    "    if azdias[feature_name].dtype == np.object:\n",
    "        unknown_list_no_brackets = unknown_list_string.replace('[', '').replace(']', '')\n",
    "        unknown_list_elements = unknown_list_no_brackets.split(',')\n",
    "    else :\n",
    "        unknown_list_elements = ast.literal_eval(unknown_list_string)\n",
    "        \n",
    "    count_unkonown = 0\n",
    "    for unknown_code in unknown_list_elements:\n",
    "        count_unkonown += len(azdias[azdias[feature_name] == unknown_code])\n",
    "    unknown_dict[feature_name] = count_unkonown"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'AGER_TYP': 685843,\n",
       " 'ALTERSKATEGORIE_GROB': 2881,\n",
       " 'ALTER_HH': 236768,\n",
       " 'ANREDE_KZ': 0,\n",
       " 'ANZ_HAUSHALTE_AKTIV': 6463,\n",
       " 'ANZ_HH_TITEL': 0,\n",
       " 'ANZ_PERSONEN': 0,\n",
       " 'ANZ_TITEL': 0,\n",
       " 'ARBEIT': 159,\n",
       " 'BALLRAUM': 0,\n",
       " 'CAMEO_DEUG_2015': 373,\n",
       " 'CAMEO_DEU_2015': 373,\n",
       " 'CAMEO_INTL_2015': 373,\n",
       " 'CJT_GESAMTTYP': 0,\n",
       " 'EWDICHTE': 0,\n",
       " 'FINANZTYP': 0,\n",
       " 'FINANZ_ANLEGER': 0,\n",
       " 'FINANZ_HAUSBAUER': 0,\n",
       " 'FINANZ_MINIMALIST': 0,\n",
       " 'FINANZ_SPARER': 0,\n",
       " 'FINANZ_UNAUFFAELLIGER': 0,\n",
       " 'FINANZ_VORSORGER': 0,\n",
       " 'GEBAEUDETYP': 0,\n",
       " 'GEBAEUDETYP_RASTER': 0,\n",
       " 'GEBURTSJAHR': 392318,\n",
       " 'GFK_URLAUBERTYP': 0,\n",
       " 'GREEN_AVANTGARDE': 0,\n",
       " 'HEALTH_TYP': 111196,\n",
       " 'HH_EINKOMMEN_SCORE': 0,\n",
       " 'INNENSTADT': 0,\n",
       " 'KBA05_ANTG1': 0,\n",
       " 'KBA05_ANTG2': 0,\n",
       " 'KBA05_ANTG3': 0,\n",
       " 'KBA05_ANTG4': 0,\n",
       " 'KBA05_BAUMAX': 343200,\n",
       " 'KBA05_GBZ': 0,\n",
       " 'KBA13_ANZAHL_PKW': 0,\n",
       " 'KKK': 36868,\n",
       " 'KK_KUNDENTYP': 0,\n",
       " 'KONSUMNAEHE': 0,\n",
       " 'LP_FAMILIE_FEIN': 72938,\n",
       " 'LP_FAMILIE_GROB': 72938,\n",
       " 'LP_LEBENSPHASE_FEIN': 92778,\n",
       " 'LP_LEBENSPHASE_GROB': 89718,\n",
       " 'LP_STATUS_FEIN': 0,\n",
       " 'LP_STATUS_GROB': 0,\n",
       " 'MIN_GEBAEUDEJAHR': 0,\n",
       " 'MOBI_REGIO': 0,\n",
       " 'NATIONALITAET_KZ': 108315,\n",
       " 'ONLINE_AFFINITAET': 0,\n",
       " 'ORTSGR_KLS9': 58,\n",
       " 'OST_WEST_KZ': 0,\n",
       " 'PLZ8_ANTG1': 0,\n",
       " 'PLZ8_ANTG2': 0,\n",
       " 'PLZ8_ANTG3': 0,\n",
       " 'PLZ8_ANTG4': 0,\n",
       " 'PLZ8_BAUMAX': 0,\n",
       " 'PLZ8_GBZ': 0,\n",
       " 'PLZ8_HHZ': 0,\n",
       " 'PRAEGENDE_JUGENDJAHRE': 108164,\n",
       " 'REGIOTYP': 36868,\n",
       " 'RELAT_AB': 159,\n",
       " 'RETOURTYP_BK_S': 0,\n",
       " 'SEMIO_DOM': 0,\n",
       " 'SEMIO_ERL': 0,\n",
       " 'SEMIO_FAM': 0,\n",
       " 'SEMIO_KAEM': 0,\n",
       " 'SEMIO_KRIT': 0,\n",
       " 'SEMIO_KULT': 0,\n",
       " 'SEMIO_LUST': 0,\n",
       " 'SEMIO_MAT': 0,\n",
       " 'SEMIO_PFLICHT': 0,\n",
       " 'SEMIO_RAT': 0,\n",
       " 'SEMIO_REL': 0,\n",
       " 'SEMIO_SOZ': 0,\n",
       " 'SEMIO_TRADV': 0,\n",
       " 'SEMIO_VERT': 0,\n",
       " 'SHOPPER_TYP': 111196,\n",
       " 'SOHO_KZ': 0,\n",
       " 'TITEL_KZ': 815562,\n",
       " 'VERS_TYP': 111196,\n",
       " 'WOHNDAUER_2008': 0,\n",
       " 'WOHNLAGE': 0,\n",
       " 'W_KEIT_KIND_HH': 40386,\n",
       " 'ZABEOTYP': 0}"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "unknown_dict"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Convert Missing Value Codes to NaNs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "azdias_nan = azdias.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "feature_name= AGER_TYP unknown_list_elements= [-1, 0]\n",
      "feature_name= ALTERSKATEGORIE_GROB unknown_list_elements= [-1, 0, 9]\n",
      "feature_name= ANREDE_KZ unknown_list_elements= [-1, 0]\n",
      "feature_name= CJT_GESAMTTYP unknown_list_elements= [0]\n",
      "feature_name= FINANZ_MINIMALIST unknown_list_elements= [-1]\n",
      "feature_name= FINANZ_SPARER unknown_list_elements= [-1]\n",
      "feature_name= FINANZ_VORSORGER unknown_list_elements= [-1]\n",
      "feature_name= FINANZ_ANLEGER unknown_list_elements= [-1]\n",
      "feature_name= FINANZ_UNAUFFAELLIGER unknown_list_elements= [-1]\n",
      "feature_name= FINANZ_HAUSBAUER unknown_list_elements= [-1]\n",
      "feature_name= FINANZTYP unknown_list_elements= [-1]\n",
      "feature_name= GEBURTSJAHR unknown_list_elements= [0]\n",
      "feature_name= HEALTH_TYP unknown_list_elements= [-1, 0]\n",
      "feature_name= LP_LEBENSPHASE_FEIN unknown_list_elements= [0]\n",
      "feature_name= LP_LEBENSPHASE_GROB unknown_list_elements= [0]\n",
      "feature_name= LP_FAMILIE_FEIN unknown_list_elements= [0]\n",
      "feature_name= LP_FAMILIE_GROB unknown_list_elements= [0]\n",
      "feature_name= LP_STATUS_FEIN unknown_list_elements= [0]\n",
      "feature_name= LP_STATUS_GROB unknown_list_elements= [0]\n",
      "feature_name= NATIONALITAET_KZ unknown_list_elements= [-1, 0]\n",
      "feature_name= PRAEGENDE_JUGENDJAHRE unknown_list_elements= [-1, 0]\n",
      "feature_name= RETOURTYP_BK_S unknown_list_elements= [0]\n",
      "feature_name= SEMIO_SOZ unknown_list_elements= [-1, 9]\n",
      "feature_name= SEMIO_FAM unknown_list_elements= [-1, 9]\n",
      "feature_name= SEMIO_REL unknown_list_elements= [-1, 9]\n",
      "feature_name= SEMIO_MAT unknown_list_elements= [-1, 9]\n",
      "feature_name= SEMIO_VERT unknown_list_elements= [-1, 9]\n",
      "feature_name= SEMIO_LUST unknown_list_elements= [-1, 9]\n",
      "feature_name= SEMIO_ERL unknown_list_elements= [-1, 9]\n",
      "feature_name= SEMIO_KULT unknown_list_elements= [-1, 9]\n",
      "feature_name= SEMIO_RAT unknown_list_elements= [-1, 9]\n",
      "feature_name= SEMIO_KRIT unknown_list_elements= [-1, 9]\n",
      "feature_name= SEMIO_DOM unknown_list_elements= [-1, 9]\n",
      "feature_name= SEMIO_KAEM unknown_list_elements= [-1, 9]\n",
      "feature_name= SEMIO_PFLICHT unknown_list_elements= [-1, 9]\n",
      "feature_name= SEMIO_TRADV unknown_list_elements= [-1, 9]\n",
      "feature_name= SHOPPER_TYP unknown_list_elements= [-1]\n",
      "feature_name= SOHO_KZ unknown_list_elements= [-1]\n",
      "feature_name= TITEL_KZ unknown_list_elements= [-1, 0]\n",
      "feature_name= VERS_TYP unknown_list_elements= [-1]\n",
      "feature_name= ZABEOTYP unknown_list_elements= [-1, 9]\n",
      "feature_name= ALTER_HH unknown_list_elements= [0]\n",
      "feature_name= HH_EINKOMMEN_SCORE unknown_list_elements= [-1, 0]\n",
      "feature_name= KK_KUNDENTYP unknown_list_elements= [-1]\n",
      "feature_name= W_KEIT_KIND_HH unknown_list_elements= [-1, 0]\n",
      "feature_name= WOHNDAUER_2008 unknown_list_elements= [-1, 0]\n",
      "feature_name= ANZ_HAUSHALTE_AKTIV unknown_list_elements= [0]\n",
      "feature_name= GEBAEUDETYP unknown_list_elements= [-1, 0]\n",
      "feature_name= MIN_GEBAEUDEJAHR unknown_list_elements= [0]\n",
      "feature_name= OST_WEST_KZ unknown_list_elements= ['-1']\n",
      "feature_name= WOHNLAGE unknown_list_elements= [-1]\n",
      "feature_name= CAMEO_DEUG_2015 unknown_list_elements= ['-1', 'X']\n",
      "feature_name= CAMEO_DEU_2015 unknown_list_elements= ['XX']\n",
      "feature_name= CAMEO_INTL_2015 unknown_list_elements= ['-1', 'XX']\n",
      "feature_name= KBA05_ANTG1 unknown_list_elements= [-1]\n",
      "feature_name= KBA05_ANTG2 unknown_list_elements= [-1]\n",
      "feature_name= KBA05_ANTG3 unknown_list_elements= [-1]\n",
      "feature_name= KBA05_ANTG4 unknown_list_elements= [-1]\n",
      "feature_name= KBA05_BAUMAX unknown_list_elements= [-1, 0]\n",
      "feature_name= KBA05_GBZ unknown_list_elements= [-1, 0]\n",
      "feature_name= BALLRAUM unknown_list_elements= [-1]\n",
      "feature_name= EWDICHTE unknown_list_elements= [-1]\n",
      "feature_name= INNENSTADT unknown_list_elements= [-1]\n",
      "feature_name= KKK unknown_list_elements= [-1, 0]\n",
      "feature_name= REGIOTYP unknown_list_elements= [-1, 0]\n",
      "feature_name= PLZ8_ANTG1 unknown_list_elements= [-1]\n",
      "feature_name= PLZ8_ANTG2 unknown_list_elements= [-1]\n",
      "feature_name= PLZ8_ANTG3 unknown_list_elements= [-1]\n",
      "feature_name= PLZ8_ANTG4 unknown_list_elements= [-1]\n",
      "feature_name= PLZ8_BAUMAX unknown_list_elements= [-1, 0]\n",
      "feature_name= PLZ8_HHZ unknown_list_elements= [-1]\n",
      "feature_name= PLZ8_GBZ unknown_list_elements= [-1]\n",
      "feature_name= ARBEIT unknown_list_elements= [-1, 9]\n",
      "feature_name= ORTSGR_KLS9 unknown_list_elements= [-1, 0]\n",
      "feature_name= RELAT_AB unknown_list_elements= [-1, 9]\n"
     ]
    }
   ],
   "source": [
    "for feature_name, unknown_list_string in zip(feat_info['attribute'], feat_info['missing_or_unknown']):\n",
    "    if azdias_nan[feature_name].dtype == np.object:\n",
    "        unknown_list_no_brackets = unknown_list_string.replace('[', '').replace(']', '')\n",
    "        unknown_list_elements = unknown_list_no_brackets.split(',')\n",
    "    else :\n",
    "        unknown_list_elements = ast.literal_eval(unknown_list_string)\n",
    "    if len(unknown_list_elements) > 0:\n",
    "        print('feature_name=', feature_name, 'unknown_list_elements=', unknown_list_elements)\n",
    "        azdias_nan[feature_name].replace(unknown_list_elements, np.nan, inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Step 1.1.2: Assess Missing Data in Each Column\n",
    "\n",
    "How much missing data is present in each column? There are a few columns that are outliers in terms of the proportion of values that are missing. You will want to use matplotlib's [`hist()`](https://matplotlib.org/api/_as_gen/matplotlib.pyplot.hist.html) function to visualize the distribution of missing value counts to find these columns. Identify and document these columns. While some of these columns might have justifications for keeping or re-encoding the data, for this project you should just remove them from the dataframe. (Feel free to make remarks about these outlier columns in the discussion, however!)\n",
    "\n",
    "For the remaining features, are there any patterns in which columns have, or share, missing data?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Visualize the distribution of missing value counts in each columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Container object of 85 artists>"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f5416a2c400>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "null_counts = azdias_nan.isnull().sum()/len(azdias_nan)\n",
    "plt.figure(figsize=(16,8))\n",
    "plt.xticks(np.arange(len(null_counts))+0.5,null_counts.index,rotation='vertical')\n",
    "plt.ylabel('fraction of rows with missing data')\n",
    "plt.bar(np.arange(len(null_counts)),null_counts)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Visualize the distribution of missing value counts proportion in each columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0,0.5,'Number of rows with missing data')"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f540a418358>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "azdias_nan.isnull().sum().plot(kind='bar', figsize=(16,8))\n",
    "plt.ylabel('Number of rows with missing data')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Remove the outlier columns from the dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "azdias_dropcols = azdias_nan.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              column_name  missing_proportion\n",
      "40               TITEL_KZ            0.997576\n",
      "0                AGER_TYP            0.769554\n",
      "47           KK_KUNDENTYP            0.655967\n",
      "64           KBA05_BAUMAX            0.534687\n",
      "11            GEBURTSJAHR            0.440203\n",
      "43               ALTER_HH            0.348137\n",
      "70                    KKK            0.177357\n",
      "73               REGIOTYP            0.177357\n",
      "48         W_KEIT_KIND_HH            0.166051\n",
      "60            KBA05_ANTG1            0.149597\n",
      "61            KBA05_ANTG2            0.149597\n",
      "62            KBA05_ANTG3            0.149597\n",
      "63            KBA05_ANTG4            0.149597\n",
      "65              KBA05_GBZ            0.149597\n",
      "71             MOBI_REGIO            0.149597\n",
      "77             PLZ8_ANTG3            0.130736\n",
      "76             PLZ8_ANTG2            0.130736\n",
      "81               PLZ8_GBZ            0.130736\n",
      "80               PLZ8_HHZ            0.130736\n",
      "75             PLZ8_ANTG1            0.130736\n",
      "79            PLZ8_BAUMAX            0.130736\n",
      "78             PLZ8_ANTG4            0.130736\n",
      "41               VERS_TYP            0.124768\n",
      "14             HEALTH_TYP            0.124768\n",
      "38            SHOPPER_TYP            0.124768\n",
      "21       NATIONALITAET_KZ            0.121536\n",
      "22  PRAEGENDE_JUGENDJAHRE            0.121366\n",
      "74       KBA13_ANZAHL_PKW            0.118714\n",
      "50    ANZ_HAUSHALTE_AKTIV            0.111769\n",
      "59        CAMEO_INTL_2015            0.111479\n",
      "..                    ...                 ...\n",
      "3           CJT_GESAMTTYP            0.005446\n",
      "19         LP_STATUS_FEIN            0.005446\n",
      "20         LP_STATUS_GROB            0.005446\n",
      "23         RETOURTYP_BK_S            0.005446\n",
      "72      ONLINE_AFFINITAET            0.005446\n",
      "1    ALTERSKATEGORIE_GROB            0.003233\n",
      "8   FINANZ_UNAUFFAELLIGER            0.000000\n",
      "10              FINANZTYP            0.000000\n",
      "9        FINANZ_HAUSBAUER            0.000000\n",
      "13       GREEN_AVANTGARDE            0.000000\n",
      "5           FINANZ_SPARER            0.000000\n",
      "4       FINANZ_MINIMALIST            0.000000\n",
      "6        FINANZ_VORSORGER            0.000000\n",
      "7          FINANZ_ANLEGER            0.000000\n",
      "2               ANREDE_KZ            0.000000\n",
      "35             SEMIO_KAEM            0.000000\n",
      "24              SEMIO_SOZ            0.000000\n",
      "36          SEMIO_PFLICHT            0.000000\n",
      "25              SEMIO_FAM            0.000000\n",
      "26              SEMIO_REL            0.000000\n",
      "27              SEMIO_MAT            0.000000\n",
      "28             SEMIO_VERT            0.000000\n",
      "29             SEMIO_LUST            0.000000\n",
      "30              SEMIO_ERL            0.000000\n",
      "31             SEMIO_KULT            0.000000\n",
      "32              SEMIO_RAT            0.000000\n",
      "33             SEMIO_KRIT            0.000000\n",
      "34              SEMIO_DOM            0.000000\n",
      "37            SEMIO_TRADV            0.000000\n",
      "42               ZABEOTYP            0.000000\n",
      "\n",
      "[85 rows x 2 columns]\n"
     ]
    }
   ],
   "source": [
    "missingvalues_prop = (azdias_dropcols.isnull().sum()/len(azdias_dropcols)).reset_index()\n",
    "missingvalues_prop.columns = ['column_name','missing_proportion']\n",
    "missingvalues_prop = missingvalues_prop.sort_values(by = 'missing_proportion', ascending = False)\n",
    "print(missingvalues_prop)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['TITEL_KZ', 'AGER_TYP', 'KK_KUNDENTYP', 'KBA05_BAUMAX', 'GEBURTSJAHR', 'ALTER_HH']\n"
     ]
    }
   ],
   "source": [
    "# Remove the outlier columns from the dataset. (You'll perform other data\n",
    "# engineering tasks such as re-encoding and imputation later.)\n",
    "dropcols = missingvalues_prop[missingvalues_prop['missing_proportion'] > 0.3].column_name.tolist()\n",
    "print(dropcols)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "azdias_dropcols = azdias_dropcols.drop(dropcols, axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(891221, 79)"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "azdias_dropcols.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Visualize the distribution of missing value counts in remaining columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Container object of 79 artists>"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f5409843ef0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "null_counts_dropcols = azdias_dropcols.isnull().sum()/len(azdias_dropcols)\n",
    "plt.figure(figsize=(16,8))\n",
    "plt.xticks(np.arange(len(null_counts_dropcols))+0.5,null_counts_dropcols.index,rotation='vertical')\n",
    "plt.ylabel('fraction of rows with missing data')\n",
    "plt.bar(np.arange(len(null_counts_dropcols)),null_counts_dropcols)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Discussion 1.1.2: Assess Missing Data in Each Column\n",
    "\n",
    "By visualizing the distribution of missing value counts for each feature we can identify two patterns, that means two groups of features. \n",
    "I decide to remove the features that belong to the pattern with a large proportion of missing values.\n",
    "Those features are `['TITEL_KZ', 'AGER_TYP', 'KK_KUNDENTYP', 'KBA05_BAUMAX', 'GEBURTSJAHR', 'ALTER_HH']`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Step 1.1.3: Assess Missing Data in Each Row\n",
    "\n",
    "Now, you'll perform a similar assessment for the rows of the dataset. How much data is missing in each row? As with the columns, you should see some groups of points that have a very different numbers of missing values. Divide the data into two subsets: one for data points that are above some threshold for missing values, and a second subset for points below that threshold.\n",
    "\n",
    "In order to know what to do with the outlier rows, we should see if the distribution of data values on columns that are not missing data (or are missing very little data) are similar or different between the two groups. Select at least five of these columns and compare the distribution of values.\n",
    "- You can use seaborn's [`countplot()`](https://seaborn.pydata.org/generated/seaborn.countplot.html) function to create a bar chart of code frequencies and matplotlib's [`subplot()`](https://matplotlib.org/api/_as_gen/matplotlib.pyplot.subplot.html) function to put bar charts for the two subplots side by side.\n",
    "- To reduce repeated code, you might want to write a function that can perform this comparison, taking as one of its arguments a column to be compared.\n",
    "\n",
    "Depending on what you observe in your comparison, this will have implications on how you approach your conclusions later in the analysis. If the distributions of non-missing features look similar between the data with many missing values and the data with few or no missing values, then we could argue that simply dropping those points from the analysis won't present a major issue. On the other hand, if the data with many missing values looks very different from the data with few or no missing values, then we should make a note on those data as special. We'll revisit these data later on. **Either way, you should continue your analysis for now using just the subset of the data with few or no missing values.**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### How much data is missing in each row of the dataset?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "891221\n"
     ]
    }
   ],
   "source": [
    "\n",
    "null_counts_rows = (azdias_dropcols.isnull().sum(axis=1)/azdias_dropcols.shape[1]).reset_index()\n",
    "print(len(null_counts_rows))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(891221, 2)"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "null_counts_rows.columns = ['row_number', 'missing_count']\n",
    "null_counts_rows.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "azdias_droprows = azdias_dropcols.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "azdias_droprows['missing_count'] = null_counts_rows['missing_count']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(891221, 80)"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "azdias_droprows.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0    0.544304\n",
      "1    0.000000\n",
      "2    0.000000\n",
      "3    0.088608\n",
      "4    0.000000\n",
      "5    0.000000\n",
      "6    0.000000\n",
      "7    0.000000\n",
      "8    0.000000\n",
      "9    0.000000\n",
      "Name: missing_count, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "print(azdias_droprows['missing_count'][:10])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Divide the data into two subsets based on the number of missing values in each row"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(817108, 80)"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Write code to divide the data into two subsets based on the number of missing\n",
    "# values in each row.\n",
    "azdias_null_rows_under = azdias_droprows.copy()\n",
    "azdias_null_rows_under = azdias_null_rows_under[azdias_null_rows_under['missing_count'] < 0.5]\n",
    "azdias_null_rows_under.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(74113, 80)"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "azdias_null_rows_over = azdias_droprows.copy()\n",
    "azdias_null_rows_over = azdias_null_rows_over[azdias_null_rows_over['missing_count'] >= 0.5]\n",
    "azdias_null_rows_over.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Compare the distributions of non-missing features between the data with many missing values and the data with few missing values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "def subplot_under_over(dataset1, dataset2, feature):\n",
    "    f, (ax1, ax2) = plt.subplots(1, 2, sharey=True)\n",
    "    sns.countplot(x=feature, data=dataset1, ax=ax1)\n",
    "    ax1.set_title('dataset1')\n",
    "    sns.countplot(x=feature, data=dataset2, ax=ax2)\n",
    "    ax1.set_title('dataset2')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "24\n",
      "['FINANZ_UNAUFFAELLIGER', 'FINANZTYP', 'FINANZ_HAUSBAUER', 'GREEN_AVANTGARDE', 'FINANZ_SPARER', 'FINANZ_MINIMALIST', 'FINANZ_VORSORGER', 'FINANZ_ANLEGER', 'ANREDE_KZ', 'SEMIO_KAEM', 'SEMIO_SOZ', 'SEMIO_PFLICHT', 'SEMIO_FAM', 'SEMIO_REL', 'SEMIO_MAT', 'SEMIO_VERT', 'SEMIO_LUST', 'SEMIO_ERL', 'SEMIO_KULT', 'SEMIO_RAT', 'SEMIO_KRIT', 'SEMIO_DOM', 'SEMIO_TRADV', 'ZABEOTYP']\n"
     ]
    }
   ],
   "source": [
    "nono_null_cols = missingvalues_prop[missingvalues_prop['missing_proportion'] == 0.0].column_name.tolist()\n",
    "print(len(nono_null_cols))\n",
    "print(nono_null_cols)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.6/site-packages/matplotlib/pyplot.py:523: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).\n",
      "  max_open_warning, RuntimeWarning)\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f53f19b82b0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f53f18a5c88>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f53f189a0b8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f53f1817470>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f53f17b39b0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f53f17068d0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f53f1632198>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f53f15ae588>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f53f15385c0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f53f14caa20>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f53e0a0ed68>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f53e09ac3c8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f53e0943f60>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f53e0856358>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f53e086d1d0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f53e0714320>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f53e06a9ef0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f53e064b2b0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f53e0559dd8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f53e04f5e80>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f53e041fd68>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f53e03a9240>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f53e0336198>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f53e025dc18>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "for non_null_col in nono_null_cols:\n",
    "    subplot_under_over(azdias_null_rows_under, azdias_null_rows_over, non_null_col)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Discussion 1.1.3: Assess Missing Data in Each Row\n",
    "\n",
    "I have been split the data into two parts based on threshold = 0.5. \n",
    "By comparing the distributions of non-missing features between the data with many missing values and the data with few missing values, i found that the data with many missing values looks very different from the data with few missing values, so i make a note on those data as special."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Step 1.2: Select and Re-Encode Features\n",
    "\n",
    "Checking for missing data isn't the only way in which you can prepare a dataset for analysis. Since the unsupervised learning techniques to be used will only work on data that is encoded numerically, you need to make a few encoding changes or additional assumptions to be able to make progress. In addition, while almost all of the values in the dataset are encoded using numbers, not all of them represent numeric values. Check the third column of the feature summary (`feat_info`) for a summary of types of measurement.\n",
    "- For numeric and interval data, these features can be kept without changes.\n",
    "- Most of the variables in the dataset are ordinal in nature. While ordinal values may technically be non-linear in spacing, make the simplifying assumption that the ordinal variables can be treated as being interval in nature (that is, kept without any changes).\n",
    "- Special handling may be necessary for the remaining two variable types: categorical, and 'mixed'.\n",
    "\n",
    "In the first two parts of this sub-step, you will perform an investigation of the categorical and mixed-type features and make a decision on each of them, whether you will keep, drop, or re-encode each. Then, in the last part, you will create a new data frame with only the selected and engineered columns.\n",
    "\n",
    "Data wrangling is often the trickiest part of the data analysis process, and there's a lot of it to be done here. But stick with it: once you're done with this step, you'll be ready to get to the machine learning parts of the project!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(817108, 79)"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clean_data = azdias_null_rows_under.copy()\n",
    "clean_data = clean_data.drop(['missing_count'], axis=1)\n",
    "clean_data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ordinal        49\n",
       "categorical    21\n",
       "mixed           7\n",
       "numeric         7\n",
       "interval        1\n",
       "Name: type, dtype: int64"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# How many features are there of each data type?\n",
    "feat_info['type'].value_counts()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Step 1.2.1: Re-Encode Categorical Features\n",
    "\n",
    "For categorical data, you would ordinarily need to encode the levels as dummy variables. Depending on the number of categories, perform one of the following:\n",
    "- For binary (two-level) categoricals that take numeric values, you can keep them without needing to do anything.\n",
    "- There is one binary variable that takes on non-numeric values. For this one, you need to re-encode the values as numbers or create a dummy variable.\n",
    "- For multi-level categoricals (three or more values), you can choose to encode the values using multiple dummy variables (e.g. via [OneHotEncoder](http://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.OneHotEncoder.html)), or (to keep things straightforward) just drop them from the analysis. As always, document your choices in the Discussion section."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Get categorical and mixed features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "col_name= ANREDE_KZ col_type= categorical number of categories= 2\n",
      "col_name= CJT_GESAMTTYP col_type= categorical number of categories= 6\n",
      "col_name= FINANZTYP col_type= categorical number of categories= 6\n",
      "col_name= GFK_URLAUBERTYP col_type= categorical number of categories= 12\n",
      "col_name= GREEN_AVANTGARDE col_type= categorical number of categories= 2\n",
      "---> col_name= LP_LEBENSPHASE_FEIN col_type= mixed number of categories= 40\n",
      "---> col_name= LP_LEBENSPHASE_GROB col_type= mixed number of categories= 12\n",
      "col_name= LP_FAMILIE_FEIN col_type= categorical number of categories= 11\n",
      "col_name= LP_FAMILIE_GROB col_type= categorical number of categories= 5\n",
      "col_name= LP_STATUS_FEIN col_type= categorical number of categories= 10\n",
      "col_name= LP_STATUS_GROB col_type= categorical number of categories= 5\n",
      "col_name= NATIONALITAET_KZ col_type= categorical number of categories= 3\n",
      "---> col_name= PRAEGENDE_JUGENDJAHRE col_type= mixed number of categories= 15\n",
      "col_name= SHOPPER_TYP col_type= categorical number of categories= 4\n",
      "col_name= SOHO_KZ col_type= categorical number of categories= 2\n",
      "col_name= VERS_TYP col_type= categorical number of categories= 2\n",
      "col_name= ZABEOTYP col_type= categorical number of categories= 6\n",
      "col_name= GEBAEUDETYP col_type= categorical number of categories= 7\n",
      "col_name= OST_WEST_KZ col_type= categorical number of categories= 2\n",
      "---> col_name= WOHNLAGE col_type= mixed number of categories= 8\n",
      "col_name= CAMEO_DEUG_2015 col_type= categorical number of categories= 9\n",
      "col_name= CAMEO_DEU_2015 col_type= categorical number of categories= 44\n",
      "---> col_name= CAMEO_INTL_2015 col_type= mixed number of categories= 21\n",
      "---> col_name= PLZ8_BAUMAX col_type= mixed number of categories= 5\n"
     ]
    }
   ],
   "source": [
    "# Assess categorical variables: which are binary, which are multi-level, and\n",
    "# which one needs to be re-encoded?\n",
    "\n",
    "multi_level_cat_feat = []\n",
    "binary_cat_feat = []\n",
    "mixed_feat = []\n",
    "for col_name in clean_data.columns:\n",
    "    col_type = feat_info[feat_info['attribute']==col_name].type.item()\n",
    "    if col_type == 'categorical':\n",
    "        num_cat = len(pd.value_counts(clean_data[col_name]))\n",
    "        print('col_name=', col_name, 'col_type=', col_type, 'number of categories=', num_cat)\n",
    "        if num_cat == 2:\n",
    "            binary_cat_feat.append(col_name)\n",
    "        else:\n",
    "            multi_level_cat_feat.append(col_name)\n",
    "    elif col_type == 'mixed':\n",
    "        num_cat = len(pd.value_counts(clean_data[col_name]))\n",
    "        print('---> col_name=', col_name, 'col_type=', col_type, 'number of categories=', num_cat)\n",
    "        mixed_feat.append(col_name)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Dummy features consist of multi-level and binary-non-numeric categorical features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "dummy_cat = multi_level_cat_feat.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "feature=  ANREDE_KZ , type in dataset= int64\n",
      "feature=  GREEN_AVANTGARDE , type in dataset= int64\n",
      "feature=  SOHO_KZ , type in dataset= float64\n",
      "feature=  VERS_TYP , type in dataset= float64\n",
      "feature=  OST_WEST_KZ , type in dataset= object\n"
     ]
    }
   ],
   "source": [
    "for bin_cat in binary_cat_feat:\n",
    "    print('feature= ',bin_cat, ', type in dataset=', clean_data[bin_cat].dtype)\n",
    "    if clean_data[bin_cat].dtype == 'object':\n",
    "        dummy_cat.append(bin_cat)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "14\n",
      "['CJT_GESAMTTYP', 'FINANZTYP', 'GFK_URLAUBERTYP', 'LP_FAMILIE_FEIN', 'LP_FAMILIE_GROB', 'LP_STATUS_FEIN', 'LP_STATUS_GROB', 'NATIONALITAET_KZ', 'SHOPPER_TYP', 'ZABEOTYP', 'GEBAEUDETYP', 'CAMEO_DEUG_2015', 'CAMEO_DEU_2015', 'OST_WEST_KZ']\n"
     ]
    }
   ],
   "source": [
    "print(len(dummy_cat))\n",
    "print(dummy_cat)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "feature=  CJT_GESAMTTYP , type= float64\n",
      "feature=  FINANZTYP , type= int64\n",
      "feature=  GFK_URLAUBERTYP , type= float64\n",
      "feature=  LP_FAMILIE_FEIN , type= float64\n",
      "feature=  LP_FAMILIE_GROB , type= float64\n",
      "feature=  LP_STATUS_FEIN , type= float64\n",
      "feature=  LP_STATUS_GROB , type= float64\n",
      "feature=  NATIONALITAET_KZ , type= float64\n",
      "feature=  SHOPPER_TYP , type= float64\n",
      "feature=  ZABEOTYP , type= int64\n",
      "feature=  GEBAEUDETYP , type= float64\n",
      "feature=  CAMEO_DEUG_2015 , type= object\n",
      "feature=  CAMEO_DEU_2015 , type= object\n"
     ]
    }
   ],
   "source": [
    "for multi_cat in multi_level_cat_feat:\n",
    "    print('feature= ',multi_cat, ', type=', clean_data[multi_cat].dtype)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Convert dummy features to category type"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Re-encode categorical variable(s) to be kept in the analysis.\n",
    "data_cat_processed = clean_data.copy()\n",
    "for col in dummy_cat:\n",
    "    data_cat_processed[col] = data_cat_processed[col].astype('category')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(817108, 79)"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_cat_processed.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ALTERSKATEGORIE_GROB      float64\n",
       "ANREDE_KZ                   int64\n",
       "CJT_GESAMTTYP            category\n",
       "FINANZ_MINIMALIST           int64\n",
       "FINANZ_SPARER               int64\n",
       "FINANZ_VORSORGER            int64\n",
       "FINANZ_ANLEGER              int64\n",
       "FINANZ_UNAUFFAELLIGER       int64\n",
       "FINANZ_HAUSBAUER            int64\n",
       "FINANZTYP                category\n",
       "GFK_URLAUBERTYP          category\n",
       "GREEN_AVANTGARDE            int64\n",
       "HEALTH_TYP                float64\n",
       "LP_LEBENSPHASE_FEIN       float64\n",
       "LP_LEBENSPHASE_GROB       float64\n",
       "LP_FAMILIE_FEIN          category\n",
       "LP_FAMILIE_GROB          category\n",
       "LP_STATUS_FEIN           category\n",
       "LP_STATUS_GROB           category\n",
       "NATIONALITAET_KZ         category\n",
       "PRAEGENDE_JUGENDJAHRE     float64\n",
       "RETOURTYP_BK_S            float64\n",
       "SEMIO_SOZ                   int64\n",
       "SEMIO_FAM                   int64\n",
       "SEMIO_REL                   int64\n",
       "SEMIO_MAT                   int64\n",
       "SEMIO_VERT                  int64\n",
       "SEMIO_LUST                  int64\n",
       "SEMIO_ERL                   int64\n",
       "SEMIO_KULT                  int64\n",
       "                           ...   \n",
       "MIN_GEBAEUDEJAHR          float64\n",
       "OST_WEST_KZ              category\n",
       "WOHNLAGE                  float64\n",
       "CAMEO_DEUG_2015          category\n",
       "CAMEO_DEU_2015           category\n",
       "CAMEO_INTL_2015            object\n",
       "KBA05_ANTG1               float64\n",
       "KBA05_ANTG2               float64\n",
       "KBA05_ANTG3               float64\n",
       "KBA05_ANTG4               float64\n",
       "KBA05_GBZ                 float64\n",
       "BALLRAUM                  float64\n",
       "EWDICHTE                  float64\n",
       "INNENSTADT                float64\n",
       "GEBAEUDETYP_RASTER        float64\n",
       "KKK                       float64\n",
       "MOBI_REGIO                float64\n",
       "ONLINE_AFFINITAET         float64\n",
       "REGIOTYP                  float64\n",
       "KBA13_ANZAHL_PKW          float64\n",
       "PLZ8_ANTG1                float64\n",
       "PLZ8_ANTG2                float64\n",
       "PLZ8_ANTG3                float64\n",
       "PLZ8_ANTG4                float64\n",
       "PLZ8_BAUMAX               float64\n",
       "PLZ8_HHZ                  float64\n",
       "PLZ8_GBZ                  float64\n",
       "ARBEIT                    float64\n",
       "ORTSGR_KLS9               float64\n",
       "RELAT_AB                  float64\n",
       "Length: 79, dtype: object"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_cat_processed.dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Encode dummy features using OneHotEncoder "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "data_dummy_featur = pd.get_dummies(data_cat_processed[dummy_cat])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(817108, 130)"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_dummy_featur.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(817108, 79)"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_cat_processed.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(817108, 65)"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_cat_processed = data_cat_processed.drop(dummy_cat, axis = 1)\n",
    "data_cat_processed.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "data_dum_processed shape= (817108, 195)\n",
      "data_dum_processed all types= \n",
      " ALTERSKATEGORIE_GROB     float64\n",
      "ANREDE_KZ                  int64\n",
      "FINANZ_MINIMALIST          int64\n",
      "FINANZ_SPARER              int64\n",
      "FINANZ_VORSORGER           int64\n",
      "FINANZ_ANLEGER             int64\n",
      "FINANZ_UNAUFFAELLIGER      int64\n",
      "FINANZ_HAUSBAUER           int64\n",
      "GREEN_AVANTGARDE           int64\n",
      "HEALTH_TYP               float64\n",
      "LP_LEBENSPHASE_FEIN      float64\n",
      "LP_LEBENSPHASE_GROB      float64\n",
      "PRAEGENDE_JUGENDJAHRE    float64\n",
      "RETOURTYP_BK_S           float64\n",
      "SEMIO_SOZ                  int64\n",
      "SEMIO_FAM                  int64\n",
      "SEMIO_REL                  int64\n",
      "SEMIO_MAT                  int64\n",
      "SEMIO_VERT                 int64\n",
      "SEMIO_LUST                 int64\n",
      "SEMIO_ERL                  int64\n",
      "SEMIO_KULT                 int64\n",
      "SEMIO_RAT                  int64\n",
      "SEMIO_KRIT                 int64\n",
      "SEMIO_DOM                  int64\n",
      "SEMIO_KAEM                 int64\n",
      "SEMIO_PFLICHT              int64\n",
      "SEMIO_TRADV                int64\n",
      "SOHO_KZ                  float64\n",
      "VERS_TYP                 float64\n",
      "                          ...   \n",
      "CAMEO_DEU_2015_4D          uint8\n",
      "CAMEO_DEU_2015_4E          uint8\n",
      "CAMEO_DEU_2015_5A          uint8\n",
      "CAMEO_DEU_2015_5B          uint8\n",
      "CAMEO_DEU_2015_5C          uint8\n",
      "CAMEO_DEU_2015_5D          uint8\n",
      "CAMEO_DEU_2015_5E          uint8\n",
      "CAMEO_DEU_2015_5F          uint8\n",
      "CAMEO_DEU_2015_6A          uint8\n",
      "CAMEO_DEU_2015_6B          uint8\n",
      "CAMEO_DEU_2015_6C          uint8\n",
      "CAMEO_DEU_2015_6D          uint8\n",
      "CAMEO_DEU_2015_6E          uint8\n",
      "CAMEO_DEU_2015_6F          uint8\n",
      "CAMEO_DEU_2015_7A          uint8\n",
      "CAMEO_DEU_2015_7B          uint8\n",
      "CAMEO_DEU_2015_7C          uint8\n",
      "CAMEO_DEU_2015_7D          uint8\n",
      "CAMEO_DEU_2015_7E          uint8\n",
      "CAMEO_DEU_2015_8A          uint8\n",
      "CAMEO_DEU_2015_8B          uint8\n",
      "CAMEO_DEU_2015_8C          uint8\n",
      "CAMEO_DEU_2015_8D          uint8\n",
      "CAMEO_DEU_2015_9A          uint8\n",
      "CAMEO_DEU_2015_9B          uint8\n",
      "CAMEO_DEU_2015_9C          uint8\n",
      "CAMEO_DEU_2015_9D          uint8\n",
      "CAMEO_DEU_2015_9E          uint8\n",
      "OST_WEST_KZ_O              uint8\n",
      "OST_WEST_KZ_W              uint8\n",
      "Length: 195, dtype: object\n"
     ]
    }
   ],
   "source": [
    "data_cat_processed[data_dummy_featur.columns] = data_dummy_featur\n",
    "print(\"data_dum_processed shape= {}\".format(data_cat_processed.shape))\n",
    "print(\"data_dum_processed all types= \\n\", data_cat_processed.dtypes)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Discussion 1.2.1: Re-Encode Categorical Features\n",
    "\n",
    "After exploring the categorical features i have decided to keep all features and handle them like that:\n",
    "1. binary categorical features that take numeric values, keep them without do anything.\n",
    "2. binary categirical features that take non-numeric values and all multi-level categorical features, convert them to `category` type and then encode their values using multiple dummy variables (`OneHotEncoder`)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Step 1.2.2: Engineer Mixed-Type Features\n",
    "\n",
    "There are a handful of features that are marked as \"mixed\" in the feature summary that require special treatment in order to be included in the analysis. There are two in particular that deserve attention; the handling of the rest are up to your own choices:\n",
    "- \"PRAEGENDE_JUGENDJAHRE\" combines information on three dimensions: generation by decade, movement (mainstream vs. avantgarde), and nation (east vs. west). While there aren't enough levels to disentangle east from west, you should create two new variables to capture the other two dimensions: an interval-type variable for decade, and a binary variable for movement.\n",
    "- \"CAMEO_INTL_2015\" combines information on two axes: wealth and life stage. Break up the two-digit codes by their 'tens'-place and 'ones'-place digits into two new ordinal variables (which, for the purposes of this project, is equivalent to just treating them as their raw numeric values).\n",
    "- If you decide to keep or engineer new features around the other mixed-type features, make sure you note your steps in the Discussion section.\n",
    "\n",
    "Be sure to check `Data_Dictionary.md` for the details needed to finish these tasks."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "14.0    188663\n",
       "8.0     145941\n",
       "5.0      86403\n",
       "10.0     85808\n",
       "3.0      55189\n",
       "15.0     42547\n",
       "11.0     35752\n",
       "9.0      33570\n",
       "6.0      25652\n",
       "12.0     24446\n",
       "1.0      21281\n",
       "4.0      20451\n",
       "2.0       7479\n",
       "13.0      5764\n",
       "7.0       4010\n",
       "Name: PRAEGENDE_JUGENDJAHRE, dtype: int64"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Investigate \"PRAEGENDE_JUGENDJAHRE\" and engineer two new variables.\n",
    "pd.value_counts(data_cat_processed['PRAEGENDE_JUGENDJAHRE'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "interval_dic = {1:40, 2:40, 3:50, 4:50, 5:60, 6:60, 7:60, 8:70, 9:70, 10:80, 11:80, 12:80, 13:80, 14:90, 15:90} "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "mixed1 = data_cat_processed['PRAEGENDE_JUGENDJAHRE'].copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1     14.0\n",
       "2     15.0\n",
       "3      8.0\n",
       "4      8.0\n",
       "5      3.0\n",
       "6     10.0\n",
       "7      8.0\n",
       "8     11.0\n",
       "9     15.0\n",
       "10     3.0\n",
       "Name: PRAEGENDE_JUGENDJAHRE, dtype: float64"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mixed1[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1     90.0\n",
       "2     90.0\n",
       "3     70.0\n",
       "4     70.0\n",
       "5     50.0\n",
       "6     80.0\n",
       "7     70.0\n",
       "8     80.0\n",
       "9     90.0\n",
       "10    50.0\n",
       "Name: PRAEGENDE_JUGENDJAHRE, dtype: float64"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mixed_decade = mixed1.apply(lambda x: interval_dic[int(x)] if(pd.notnull(x)) else x)\n",
    "mixed_decade[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1     90.0\n",
       "2     90.0\n",
       "3     70.0\n",
       "4     70.0\n",
       "5     50.0\n",
       "6     80.0\n",
       "7     70.0\n",
       "8     80.0\n",
       "9     90.0\n",
       "10    50.0\n",
       "Name: interval_decade, dtype: float64"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_cat_processed['interval_decade'] = mixed_decade\n",
    "data_cat_processed['interval_decade'][:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "mixed_movement = mixed1.apply(lambda x: x%2 if(pd.notnull(x)) else x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1     0.0\n",
       "2     1.0\n",
       "3     0.0\n",
       "4     0.0\n",
       "5     1.0\n",
       "6     0.0\n",
       "7     0.0\n",
       "8     1.0\n",
       "9     1.0\n",
       "10    1.0\n",
       "Name: PRAEGENDE_JUGENDJAHRE, dtype: float64"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mixed_movement[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1     0.0\n",
       "2     1.0\n",
       "3     0.0\n",
       "4     0.0\n",
       "5     1.0\n",
       "6     0.0\n",
       "7     0.0\n",
       "8     1.0\n",
       "9     1.0\n",
       "10    1.0\n",
       "Name: binary_movement, dtype: float64"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_cat_processed['binary_movement'] = mixed_movement\n",
    "data_cat_processed['binary_movement'][:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(817108, 196)"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_cat_processed = data_cat_processed.drop('PRAEGENDE_JUGENDJAHRE', axis = 1)\n",
    "data_cat_processed.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "51    133694\n",
       "41     92336\n",
       "24     91158\n",
       "14     62884\n",
       "43     56672\n",
       "54     45391\n",
       "25     39628\n",
       "22     33155\n",
       "23     26750\n",
       "13     26336\n",
       "45     26132\n",
       "55     23955\n",
       "52     20542\n",
       "31     19024\n",
       "34     18524\n",
       "15     16974\n",
       "44     14820\n",
       "12     13249\n",
       "35     10356\n",
       "32     10354\n",
       "33      9935\n",
       "Name: CAMEO_INTL_2015, dtype: int64"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Investigate \"CAMEO_INTL_2015\" and engineer two new variables.\n",
    "pd.value_counts(data_cat_processed['CAMEO_INTL_2015'])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [],
   "source": [
    "mixed2 = data_cat_processed['CAMEO_INTL_2015'].copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1     51\n",
       "2     24\n",
       "3     12\n",
       "4     43\n",
       "5     54\n",
       "6     22\n",
       "7     14\n",
       "8     13\n",
       "9     15\n",
       "10    51\n",
       "Name: CAMEO_INTL_2015, dtype: object"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mixed2[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1     1.0\n",
       "2     4.0\n",
       "3     2.0\n",
       "4     3.0\n",
       "5     4.0\n",
       "6     2.0\n",
       "7     4.0\n",
       "8     3.0\n",
       "9     5.0\n",
       "10    1.0\n",
       "Name: CAMEO_INTL_2015, dtype: float64"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mixed_wealth = mixed2.apply(lambda x: int(x)%10 if(pd.notnull(x)) else x)\n",
    "mixed_wealth[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1     1.0\n",
       "2     4.0\n",
       "3     2.0\n",
       "4     3.0\n",
       "5     4.0\n",
       "6     2.0\n",
       "7     4.0\n",
       "8     3.0\n",
       "9     5.0\n",
       "10    1.0\n",
       "Name: mixed_wealth, dtype: float64"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_cat_processed['mixed_wealth'] = mixed_wealth\n",
    "data_cat_processed['mixed_wealth'][:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1     5.0\n",
       "2     2.0\n",
       "3     1.0\n",
       "4     4.0\n",
       "5     5.0\n",
       "6     2.0\n",
       "7     1.0\n",
       "8     1.0\n",
       "9     1.0\n",
       "10    5.0\n",
       "Name: CAMEO_INTL_2015, dtype: float64"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mixed_life_stage = mixed2.apply(lambda x: int(x)//10 if(pd.notnull(x)) else x)\n",
    "mixed_life_stage[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1     5.0\n",
       "2     2.0\n",
       "3     1.0\n",
       "4     4.0\n",
       "5     5.0\n",
       "6     2.0\n",
       "7     1.0\n",
       "8     1.0\n",
       "9     1.0\n",
       "10    5.0\n",
       "Name: mixed_life_stage, dtype: float64"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_cat_processed['mixed_life_stage'] = mixed_life_stage\n",
    "data_cat_processed['mixed_life_stage'][:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(817108, 197)"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_cat_processed = data_cat_processed.drop('CAMEO_INTL_2015', axis = 1)\n",
    "data_cat_processed.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### All the features have to be of numeric type after processing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "float64\n",
      "int64\n",
      "int64\n",
      "int64\n",
      "int64\n",
      "int64\n",
      "int64\n",
      "int64\n",
      "int64\n",
      "float64\n",
      "float64\n",
      "float64\n",
      "float64\n",
      "int64\n",
      "int64\n",
      "int64\n",
      "int64\n",
      "int64\n",
      "int64\n",
      "int64\n",
      "int64\n",
      "int64\n",
      "int64\n",
      "int64\n",
      "int64\n",
      "int64\n",
      "int64\n",
      "float64\n",
      "float64\n",
      "float64\n",
      "float64\n",
      "float64\n",
      "float64\n",
      "float64\n",
      "float64\n",
      "float64\n",
      "float64\n",
      "float64\n",
      "float64\n",
      "float64\n",
      "float64\n",
      "float64\n",
      "float64\n",
      "float64\n",
      "float64\n",
      "float64\n",
      "float64\n",
      "float64\n",
      "float64\n",
      "float64\n",
      "float64\n",
      "float64\n",
      "float64\n",
      "float64\n",
      "float64\n",
      "float64\n",
      "float64\n",
      "float64\n",
      "float64\n",
      "float64\n",
      "float64\n",
      "float64\n",
      "float64\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "uint8\n",
      "float64\n",
      "float64\n",
      "float64\n",
      "float64\n"
     ]
    }
   ],
   "source": [
    "for c in data_cat_processed.columns :\n",
    "    print (data_cat_processed[c].dtype)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Discussion 1.2.2: Engineer Mixed-Type Features\n",
    "\n",
    "After exploring the mixed features i have decided to keep all features that take numeric values (all except `CAMEO_INTL_2015`) and handle just the two special like that:\n",
    "1. `PRAEGENDE_JUGENDJAHRE`: create two new variables, an interval-type variable for decade (`decade_feat`), and a binary variable for movement (`movement_feat`).\n",
    "2. `CAMEO_INTL_2015`: Break up the two-digit codes by their 'tens'-place and 'ones'-place digits into two new ordinal variables (`wealth_feat` and `life_stage_feat`)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Step 1.2.3: Complete Feature Selection\n",
    "\n",
    "In order to finish this step up, you need to make sure that your data frame now only has the columns that you want to keep. To summarize, the dataframe should consist of the following:\n",
    "- All numeric, interval, and ordinal type columns from the original dataset.\n",
    "- Binary categorical features (all numerically-encoded).\n",
    "- Engineered features from other multi-level categorical features and mixed features.\n",
    "\n",
    "Make sure that for any new columns that you have engineered, that you've excluded the original columns from the final dataset. Otherwise, their values will interfere with the analysis later on the project. For example, you should not keep \"PRAEGENDE_JUGENDJAHRE\", since its values won't be useful for the algorithm: only the values derived from it in the engineered features you created should be retained. As a reminder, your data should only be from **the subset with few or no missing values**."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Step 1.3: Create a Cleaning Function\n",
    "\n",
    "Even though you've finished cleaning up the general population demographics data, it's important to look ahead to the future and realize that you'll need to perform the same cleaning steps on the customer demographics data. In this substep, complete the function below to execute the main feature selection, encoding, and re-engineering steps you performed above. Then, when it comes to looking at the customer data in Step 3, you can just run this function on that DataFrame to get the trimmed dataset in a single step."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_missing_values_codes(df, feature, str_list):\n",
    "    if df[feature].dtype == np.object:\n",
    "        return str_list.replace('[', '').replace(']', '').split(',')\n",
    "    else :\n",
    "        return ast.literal_eval(str_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {},
   "outputs": [],
   "source": [
    "def process_feature_missing_values_codes(df, feat_info):\n",
    "    for feature, str_list in zip(feat_info['attribute'], feat_info['missing_or_unknown']):\n",
    "        missing_values_code_list = get_missing_values_codes(df, feature, str_list)\n",
    "        if len(missing_values_code_list) > 0:\n",
    "            #print('feature=', feature, 'missing_values_code_list=', missing_values_code_list)\n",
    "            df[feature].replace(missing_values_code_list, np.nan, inplace=True)\n",
    "    return df\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_missing_values_prop(df):\n",
    "    missingvalues_prop = (df.isnull().sum()/len(df)).reset_index()\n",
    "    missingvalues_prop.columns = ['column_name','missing_proportion']\n",
    "    return missingvalues_prop.sort_values(by = 'missing_proportion', ascending = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_features_types(df, feat_info):\n",
    "    multi_cat = []\n",
    "    binary_cat = []\n",
    "    mixed = []\n",
    "    for feature in df.columns:\n",
    "        feat_type = feat_info[feat_info['attribute']==feature].type.item()\n",
    "        num_cat = len(pd.value_counts(df[feature]))\n",
    "        if feat_type == 'categorical':\n",
    "            if num_cat == 2:\n",
    "                binary_cat.append(feature)\n",
    "            else:\n",
    "                multi_cat.append(feature)\n",
    "        elif feat_type == 'mixed':\n",
    "            mixed.append(feature)\n",
    "    return multi_cat, binary_cat, mixed"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "metadata": {},
   "outputs": [],
   "source": [
    "def select_columns_rows(df, feat_info, row_nan_threshold, col_nan_threshold):\n",
    "    \n",
    "    df_nan = df.copy()\n",
    "    df_nan = process_feature_missing_values_codes(df_nan, feat_info)\n",
    "    \n",
    "    features_nan_prop = get_missing_values_prop(df_nan)\n",
    "    outlier_cols_list = features_nan_prop[features_nan_prop['missing_proportion'] > col_nan_threshold].column_name.tolist()\n",
    "    \n",
    "    df_drop_outliers_cols = df_nan.copy()\n",
    "    df_drop_outliers_cols = df_drop_outliers_cols.drop(outlier_cols_list, axis=1)\n",
    "    \n",
    "    if row_nan_threshold > 0.0:\n",
    "        nan_counts_rows = (df_drop_outliers_cols.isnull().sum(axis=1)/df_drop_outliers_cols.shape[1]).reset_index()\n",
    "        nan_counts_rows.columns = ['row_number', 'missing_count']\n",
    "\n",
    "        df_missing_count = df_drop_outliers_cols.copy()\n",
    "        df_missing_count['missing_count'] = nan_counts_rows['missing_count']\n",
    "\n",
    "        df_few_nan_rows = df_missing_count.copy()\n",
    "        df_few_nan_rows = df_few_nan_rows[df_few_nan_rows['missing_count'] < row_nan_threshold]\n",
    "        df_few_nan_rows = df_few_nan_rows.drop(['missing_count'], axis=1)\n",
    "\n",
    "        df_lot_nan_rows = df_missing_count.copy()\n",
    "        df_lot_nan_rows = df_lot_nan_rows[df_lot_nan_rows['missing_count'] >= row_nan_threshold]\n",
    "        df_lot_nan_rows = df_lot_nan_rows.drop(['missing_count'], axis=1)\n",
    "\n",
    "        return df_few_nan_rows, df_lot_nan_rows\n",
    "    else:\n",
    "        return df_drop_outliers_cols"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {},
   "outputs": [],
   "source": [
    "def engineer_cat_features(df, feat_info):\n",
    "    multi_cat, binary_cat, mixed = get_features_types(df, feat_info)\n",
    "    dummy_feat = multi_cat.copy()\n",
    "    for bin_cat in binary_cat:\n",
    "        if df[bin_cat].dtype == np.object:\n",
    "            dummy_feat.append(bin_cat)\n",
    "    \n",
    "    for dum_col in dummy_feat:\n",
    "        df[dum_col] = df[dum_col].astype('category')\n",
    "    data_dummy_feat = pd.get_dummies(df[dummy_feat])\n",
    "    df = df.drop(dummy_feat, axis = 1)\n",
    "    df[data_dummy_feat.columns] = data_dummy_feat\n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {},
   "outputs": [],
   "source": [
    "def engineer_mixed_feature1(df, feature):\n",
    "    mixed_feat1 = feature#'PRAEGENDE_JUGENDJAHRE'\n",
    "    decade_dic = {1:40, 2:40, 3:50, 4:50, 5:60, 6:60, 7:60, 8:70, 9:70, 10:80, 11:80, 12:80, 13:80, 14:90, 15:90} \n",
    "    mixed_data1 = df[mixed_feat1].copy()\n",
    "    decade_feat = mixed_data1.apply(lambda x: decade_dic[int(x)] if(pd.notnull(x)) else x)\n",
    "    movement_feat = mixed_data1.apply(lambda x: x%2 if(pd.notnull(x)) else x)\n",
    "    df['decade_feat'] = decade_feat\n",
    "    df['movement_feat'] = movement_feat\n",
    "    df = df.drop(mixed_feat1, axis = 1)\n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {},
   "outputs": [],
   "source": [
    "def engineer_mixed_feature2(df, feature):\n",
    "    mixed_feat2 = feature#'CAMEO_INTL_2015'\n",
    "    mixed_data2 = df[mixed_feat2].copy()\n",
    "    wealth_feat = mixed_data2.apply(lambda x: int(x)%10 if(pd.notnull(x)) else x)\n",
    "    life_stage_feat = mixed_data2.apply(lambda x: int(x)//10 if(pd.notnull(x)) else x)\n",
    "    df['wealth_feat'] = wealth_feat\n",
    "    df['life_stage_feat'] = life_stage_feat\n",
    "    df = df.drop(mixed_feat2, axis = 1)\n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {},
   "outputs": [],
   "source": [
    "def engineer_features(df, feat_info):\n",
    "    \n",
    "    df_cat_processed = df.copy()\n",
    "    df_cat_processed = engineer_cat_features(df_cat_processed, feat_info)\n",
    "    \n",
    "    mixed_feat1 = 'PRAEGENDE_JUGENDJAHRE'\n",
    "    df_cat_processed = engineer_mixed_feature1(df_cat_processed, mixed_feat1)\n",
    "    \n",
    "    mixed_feat2 = 'CAMEO_INTL_2015'\n",
    "    df_cat_processed = engineer_mixed_feature2(df_cat_processed, mixed_feat2)\n",
    "    \n",
    "    return df_cat_processed"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Repeat all the previous steps using the new functions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. Process null values in columns and rows using tresholds"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {},
   "outputs": [],
   "source": [
    "row_nan_threshold = 0.5 \n",
    "col_nan_threshold = 0.3\n",
    "df_few_nan_rows, df_lot_nan_rows = select_columns_rows(azdias, feat_info, row_nan_threshold, col_nan_threshold)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(817108, 79)"
      ]
     },
     "execution_count": 146,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_few_nan_rows.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(74113, 79)"
      ]
     },
     "execution_count": 147,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_lot_nan_rows.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2. Encode categorical and mixed features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_few_nan_data = engineer_features(df_few_nan_rows, feat_info)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(817108, 197)"
      ]
     },
     "execution_count": 149,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_few_nan_data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ALTERSKATEGORIE_GROB     float64\n",
       "ANREDE_KZ                  int64\n",
       "FINANZ_MINIMALIST          int64\n",
       "FINANZ_SPARER              int64\n",
       "FINANZ_VORSORGER           int64\n",
       "FINANZ_ANLEGER             int64\n",
       "FINANZ_UNAUFFAELLIGER      int64\n",
       "FINANZ_HAUSBAUER           int64\n",
       "GREEN_AVANTGARDE           int64\n",
       "HEALTH_TYP               float64\n",
       "LP_LEBENSPHASE_FEIN      float64\n",
       "LP_LEBENSPHASE_GROB      float64\n",
       "RETOURTYP_BK_S           float64\n",
       "SEMIO_SOZ                  int64\n",
       "SEMIO_FAM                  int64\n",
       "SEMIO_REL                  int64\n",
       "SEMIO_MAT                  int64\n",
       "SEMIO_VERT                 int64\n",
       "SEMIO_LUST                 int64\n",
       "SEMIO_ERL                  int64\n",
       "SEMIO_KULT                 int64\n",
       "SEMIO_RAT                  int64\n",
       "SEMIO_KRIT                 int64\n",
       "SEMIO_DOM                  int64\n",
       "SEMIO_KAEM                 int64\n",
       "SEMIO_PFLICHT              int64\n",
       "SEMIO_TRADV                int64\n",
       "SOHO_KZ                  float64\n",
       "VERS_TYP                 float64\n",
       "ANZ_PERSONEN             float64\n",
       "                          ...   \n",
       "CAMEO_DEU_2015_5C          uint8\n",
       "CAMEO_DEU_2015_5D          uint8\n",
       "CAMEO_DEU_2015_5E          uint8\n",
       "CAMEO_DEU_2015_5F          uint8\n",
       "CAMEO_DEU_2015_6A          uint8\n",
       "CAMEO_DEU_2015_6B          uint8\n",
       "CAMEO_DEU_2015_6C          uint8\n",
       "CAMEO_DEU_2015_6D          uint8\n",
       "CAMEO_DEU_2015_6E          uint8\n",
       "CAMEO_DEU_2015_6F          uint8\n",
       "CAMEO_DEU_2015_7A          uint8\n",
       "CAMEO_DEU_2015_7B          uint8\n",
       "CAMEO_DEU_2015_7C          uint8\n",
       "CAMEO_DEU_2015_7D          uint8\n",
       "CAMEO_DEU_2015_7E          uint8\n",
       "CAMEO_DEU_2015_8A          uint8\n",
       "CAMEO_DEU_2015_8B          uint8\n",
       "CAMEO_DEU_2015_8C          uint8\n",
       "CAMEO_DEU_2015_8D          uint8\n",
       "CAMEO_DEU_2015_9A          uint8\n",
       "CAMEO_DEU_2015_9B          uint8\n",
       "CAMEO_DEU_2015_9C          uint8\n",
       "CAMEO_DEU_2015_9D          uint8\n",
       "CAMEO_DEU_2015_9E          uint8\n",
       "OST_WEST_KZ_O              uint8\n",
       "OST_WEST_KZ_W              uint8\n",
       "decade_feat              float64\n",
       "movement_feat            float64\n",
       "wealth_feat              float64\n",
       "life_stage_feat          float64\n",
       "Length: 197, dtype: object"
      ]
     },
     "execution_count": 150,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_few_nan_data.dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "3. Process the dataset which had more than a specified threshold of missing values to have the same features as the dataset which had less missing values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_lot_nan_data = engineer_features(df_lot_nan_rows, feat_info)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(74113, 134)"
      ]
     },
     "execution_count": 152,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_lot_nan_data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['GREEN_AVANTGARDE',\n",
       " 'ZABEOTYP_1',\n",
       " 'GEBAEUDETYP_1.0',\n",
       " 'GEBAEUDETYP_2.0',\n",
       " 'GEBAEUDETYP_3.0',\n",
       " 'GEBAEUDETYP_4.0',\n",
       " 'GEBAEUDETYP_5.0',\n",
       " 'GEBAEUDETYP_6.0',\n",
       " 'GEBAEUDETYP_8.0',\n",
       " 'CAMEO_DEUG_2015_1',\n",
       " 'CAMEO_DEUG_2015_2',\n",
       " 'CAMEO_DEUG_2015_3',\n",
       " 'CAMEO_DEUG_2015_4',\n",
       " 'CAMEO_DEUG_2015_5',\n",
       " 'CAMEO_DEUG_2015_6',\n",
       " 'CAMEO_DEUG_2015_7',\n",
       " 'CAMEO_DEUG_2015_8',\n",
       " 'CAMEO_DEUG_2015_9',\n",
       " 'CAMEO_DEU_2015_1A',\n",
       " 'CAMEO_DEU_2015_1B',\n",
       " 'CAMEO_DEU_2015_1C',\n",
       " 'CAMEO_DEU_2015_1D',\n",
       " 'CAMEO_DEU_2015_1E',\n",
       " 'CAMEO_DEU_2015_2A',\n",
       " 'CAMEO_DEU_2015_2B',\n",
       " 'CAMEO_DEU_2015_2C',\n",
       " 'CAMEO_DEU_2015_2D',\n",
       " 'CAMEO_DEU_2015_3A',\n",
       " 'CAMEO_DEU_2015_3B',\n",
       " 'CAMEO_DEU_2015_3C',\n",
       " 'CAMEO_DEU_2015_3D',\n",
       " 'CAMEO_DEU_2015_4A',\n",
       " 'CAMEO_DEU_2015_4B',\n",
       " 'CAMEO_DEU_2015_4C',\n",
       " 'CAMEO_DEU_2015_4D',\n",
       " 'CAMEO_DEU_2015_4E',\n",
       " 'CAMEO_DEU_2015_5A',\n",
       " 'CAMEO_DEU_2015_5B',\n",
       " 'CAMEO_DEU_2015_5C',\n",
       " 'CAMEO_DEU_2015_5D',\n",
       " 'CAMEO_DEU_2015_5E',\n",
       " 'CAMEO_DEU_2015_5F',\n",
       " 'CAMEO_DEU_2015_6A',\n",
       " 'CAMEO_DEU_2015_6B',\n",
       " 'CAMEO_DEU_2015_6C',\n",
       " 'CAMEO_DEU_2015_6D',\n",
       " 'CAMEO_DEU_2015_6E',\n",
       " 'CAMEO_DEU_2015_6F',\n",
       " 'CAMEO_DEU_2015_7A',\n",
       " 'CAMEO_DEU_2015_7B',\n",
       " 'CAMEO_DEU_2015_7C',\n",
       " 'CAMEO_DEU_2015_7D',\n",
       " 'CAMEO_DEU_2015_7E',\n",
       " 'CAMEO_DEU_2015_8A',\n",
       " 'CAMEO_DEU_2015_8B',\n",
       " 'CAMEO_DEU_2015_8C',\n",
       " 'CAMEO_DEU_2015_8D',\n",
       " 'CAMEO_DEU_2015_9A',\n",
       " 'CAMEO_DEU_2015_9B',\n",
       " 'CAMEO_DEU_2015_9C',\n",
       " 'CAMEO_DEU_2015_9D',\n",
       " 'CAMEO_DEU_2015_9E',\n",
       " 'OST_WEST_KZ_O',\n",
       " 'OST_WEST_KZ_W']"
      ]
     },
     "execution_count": 153,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "diff_cols2 = [item for item in df_few_nan_data.columns if item not in df_lot_nan_data.columns]\n",
    "diff_cols2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "metadata": {},
   "outputs": [],
   "source": [
    "for col2 in diff_cols2:\n",
    "    df_lot_nan_data[col2] = np.nan"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 155,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "diff_cols3 = [item for item in df_few_nan_data.columns if item not in df_lot_nan_data.columns]\n",
    "diff_cols3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['GREEN_AVANTGARDE_0']"
      ]
     },
     "execution_count": 156,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "diff_cols4 = [item for item in df_lot_nan_data.columns if item not in df_few_nan_data.columns]\n",
    "diff_cols4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_lot_nan_data = df_lot_nan_data.drop('GREEN_AVANTGARDE_0', axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(74113, 197)"
      ]
     },
     "execution_count": 158,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_lot_nan_data.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 2: Feature Transformation\n",
    "\n",
    "### Step 2.1: Apply Feature Scaling\n",
    "\n",
    "Before we apply dimensionality reduction techniques to the data, we need to perform feature scaling so that the principal component vectors are not influenced by the natural differences in scale for features. Starting from this part of the project, you'll want to keep an eye on the [API reference page for sklearn](http://scikit-learn.org/stable/modules/classes.html) to help you navigate to all of the classes and functions that you'll need. In this substep, you'll need to check the following:\n",
    "\n",
    "- sklearn requires that data not have missing values in order for its estimators to work properly. So, before applying the scaler to your data, make sure that you've cleaned the DataFrame of the remaining missing values. This can be as simple as just removing all data points with missing data, or applying an [Imputer](http://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.Imputer.html) to replace all missing values. You might also try a more complicated procedure where you temporarily remove missing values in order to compute the scaling parameters before re-introducing those missing values and applying imputation. Think about how much missing data you have and what possible effects each approach might have on your analysis, and justify your decision in the discussion section below.\n",
    "- For the actual scaling function, a [StandardScaler](http://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.StandardScaler.html) instance is suggested, scaling each feature to mean 0 and standard deviation 1.\n",
    "- For these classes, you can make use of the `.fit_transform()` method to both fit a procedure to the data as well as apply the transformation to the data at the same time. Don't forget to keep the fit sklearn objects handy, since you'll be applying them to the customer demographics data towards the end of the project."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "metadata": {},
   "outputs": [],
   "source": [
    "# If you've not yet cleaned the dataset of all NaN values, then investigate and\n",
    "# do that now.\n",
    "mean_imp = Imputer(copy=True, axis=0, missing_values=np.nan, strategy='mean', verbose=0).fit(df_few_nan_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "metadata": {},
   "outputs": [],
   "source": [
    "imputed_data = mean_imp.transform(df_few_nan_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(817108, 197)"
      ]
     },
     "execution_count": 161,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "imputed_data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n"
     ]
    }
   ],
   "source": [
    "# count the number of NaN values in each column\n",
    "print(np.isnan(imputed_data).sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Apply feature scaling to the general population demographics data.\n",
    "standard_scaler = StandardScaler(copy=True, with_mean=True, with_std=True).fit(imputed_data)\n",
    "scaled_data = standard_scaler.transform(imputed_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(817108, 197)"
      ]
     },
     "execution_count": 164,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "scaled_data.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Discussion 2.1: Apply Feature Scaling\n",
    "\n",
    "1. I've cleaned the DataFrame of the remaining missing values by applying an `Imputer` to replace missing values of an feature using the mean along its values.\n",
    "2. Then feature scaling has been properly applied to the demographics data to mean 0 and standard deviation 1, since the clustering algorithms use distance based metrics to cluster the data."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Step 2.2: Perform Dimensionality Reduction\n",
    "\n",
    "On your scaled data, you are now ready to apply dimensionality reduction techniques.\n",
    "\n",
    "- Use sklearn's [PCA](http://scikit-learn.org/stable/modules/generated/sklearn.decomposition.PCA.html) class to apply principal component analysis on the data, thus finding the vectors of maximal variance in the data. To start, you should not set any parameters (so all components are computed) or set a number of components that is at least half the number of features (so there's enough features to see the general trend in variability).\n",
    "- Check out the ratio of variance explained by each principal component as well as the cumulative variance explained. Try plotting the cumulative or sequential values using matplotlib's [`plot()`](https://matplotlib.org/api/_as_gen/matplotlib.pyplot.plot.html) function. Based on what you find, select a value for the number of transformed features you'll retain for the clustering part of the project.\n",
    "- Once you've made a choice for the number of components to keep, make sure you re-fit a PCA instance to perform the decided-on transformation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "metadata": {},
   "outputs": [],
   "source": [
    "def do_pca(data, n_components=None):\n",
    "    pca = PCA(n_components=n_components, random_state=seed).fit(data)\n",
    "    X_pca = pca.transform(data)\n",
    "    return pca, X_pca"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "pca, X_pca = do_pca(scaled_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "metadata": {},
   "outputs": [],
   "source": [
    "def scree_plot(pca):\n",
    "    num_components=len(pca.explained_variance_ratio_)\n",
    "    ind = np.arange(num_components)\n",
    "    vals = pca.explained_variance_ratio_\n",
    " \n",
    "    plt.figure(figsize=(20, 16))\n",
    "    ax = plt.subplot(111)\n",
    "    cumvals = np.cumsum(vals)\n",
    "    ax.bar(ind, vals)\n",
    "    ax.plot(ind, cumvals)\n",
    "    for i in range(num_components):\n",
    "        ax.annotate(r\"%s%%\" % ((str(vals[i]*100)[:4])), (ind[i]+0.2, vals[i]), va=\"bottom\", ha=\"center\", fontsize=12)\n",
    " \n",
    "    ax.xaxis.set_tick_params(width=0)\n",
    "    ax.yaxis.set_tick_params(width=2, length=12)\n",
    " \n",
    "    ax.set_xlabel(\"Principal Component\")\n",
    "    ax.set_ylabel(\"Variance Explained (%)\")\n",
    "    plt.title('Explained Variance Per Principal Component')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f328cb71a20>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "scree_plot(pca)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Investigate the variance accounted for by each principal component.\n",
    "Each of the bars represents the amount of variability explained by each component. So you can see the first component explains 8.15% of the variability in the data. The second explains 5.73% of the variability and so on. Often the number of components is chosen based on the total amount of variability explained by the components. we see that by using 100 components, we capture almost 85% of the total variability in the dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Re-apply PCA to the data while selecting for number of components to retain.\n",
    "num_components = 100\n",
    "pca_selected, X_pca_selected = do_pca(scaled_data, num_components)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(100, 197)"
      ]
     },
     "execution_count": 168,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pca_selected.components_.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(817108, 100)"
      ]
     },
     "execution_count": 169,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_pca_selected.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Discussion 2.2: Perform Dimensionality Reduction\n",
    "\n",
    "I've applied `PCA` to the data to create transformed features. The number of features to retain is chosen based on the total amount of variability explained by the components. In the plot which shows the cumulative variance explained, we can see that by using 100 components, we capture almost 85% of the total variability in the dataset."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Step 2.3: Interpret Principal Components\n",
    "\n",
    "Now that we have our transformed principal components, it's a nice idea to check out the weight of each variable on the first few components to see if they can be interpreted in some fashion.\n",
    "\n",
    "As a reminder, each principal component is a unit vector that points in the direction of highest variance (after accounting for the variance captured by earlier principal components). The further a weight is from zero, the more the principal component is in the direction of the corresponding feature. If two features have large weights of the same sign (both positive or both negative), then increases in one tend expect to be associated with increases in the other. To contrast, features with different signs can be expected to show a negative correlation: increases in one variable should result in a decrease in the other.\n",
    "\n",
    "- To investigate the features, you should map each weight to their corresponding feature name, then sort the features according to weight. The most interesting features for each principal component, then, will be those at the beginning and end of the sorted list. Use the data dictionary document to help you understand these most prominent features, their relationships, and what a positive or negative value on the principal component might indicate.\n",
    "- You should investigate and interpret feature associations from the first three principal components in this substep. To help facilitate this, you should write a function that you can call at any time to print the sorted list of feature weights, for the *i*-th principal component. This might come in handy in the next step of the project, when you interpret the tendencies of the discovered clusters."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "metadata": {},
   "outputs": [],
   "source": [
    "map_weights_features=pd.DataFrame(pca_selected.components_,columns=df_few_nan_data.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ALTERSKATEGORIE_GROB</th>\n",
       "      <th>ANREDE_KZ</th>\n",
       "      <th>FINANZ_MINIMALIST</th>\n",
       "      <th>FINANZ_SPARER</th>\n",
       "      <th>FINANZ_VORSORGER</th>\n",
       "      <th>FINANZ_ANLEGER</th>\n",
       "      <th>FINANZ_UNAUFFAELLIGER</th>\n",
       "      <th>FINANZ_HAUSBAUER</th>\n",
       "      <th>GREEN_AVANTGARDE</th>\n",
       "      <th>HEALTH_TYP</th>\n",
       "      <th>...</th>\n",
       "      <th>CAMEO_DEU_2015_9B</th>\n",
       "      <th>CAMEO_DEU_2015_9C</th>\n",
       "      <th>CAMEO_DEU_2015_9D</th>\n",
       "      <th>CAMEO_DEU_2015_9E</th>\n",
       "      <th>OST_WEST_KZ_O</th>\n",
       "      <th>OST_WEST_KZ_W</th>\n",
       "      <th>decade_feat</th>\n",
       "      <th>movement_feat</th>\n",
       "      <th>wealth_feat</th>\n",
       "      <th>life_stage_feat</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.073994</td>\n",
       "      <td>0.012913</td>\n",
       "      <td>-0.179097</td>\n",
       "      <td>0.103310</td>\n",
       "      <td>-0.075352</td>\n",
       "      <td>0.044877</td>\n",
       "      <td>0.043154</td>\n",
       "      <td>0.143534</td>\n",
       "      <td>-0.094629</td>\n",
       "      <td>0.023892</td>\n",
       "      <td>...</td>\n",
       "      <td>0.056096</td>\n",
       "      <td>0.057256</td>\n",
       "      <td>0.056194</td>\n",
       "      <td>0.017256</td>\n",
       "      <td>0.043369</td>\n",
       "      <td>-0.041572</td>\n",
       "      <td>0.063535</td>\n",
       "      <td>-0.061829</td>\n",
       "      <td>-0.106033</td>\n",
       "      <td>0.179621</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.234386</td>\n",
       "      <td>0.035083</td>\n",
       "      <td>0.097835</td>\n",
       "      <td>-0.231714</td>\n",
       "      <td>0.221085</td>\n",
       "      <td>-0.206730</td>\n",
       "      <td>-0.214534</td>\n",
       "      <td>0.078794</td>\n",
       "      <td>0.002942</td>\n",
       "      <td>-0.054237</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000029</td>\n",
       "      <td>0.004152</td>\n",
       "      <td>0.009674</td>\n",
       "      <td>0.037417</td>\n",
       "      <td>0.019638</td>\n",
       "      <td>-0.017313</td>\n",
       "      <td>-0.239818</td>\n",
       "      <td>0.109778</td>\n",
       "      <td>0.017352</td>\n",
       "      <td>0.047039</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.014060</td>\n",
       "      <td>-0.347200</td>\n",
       "      <td>0.131662</td>\n",
       "      <td>-0.054966</td>\n",
       "      <td>0.045263</td>\n",
       "      <td>-0.149303</td>\n",
       "      <td>-0.046392</td>\n",
       "      <td>-0.063370</td>\n",
       "      <td>0.065722</td>\n",
       "      <td>-0.012393</td>\n",
       "      <td>...</td>\n",
       "      <td>0.011606</td>\n",
       "      <td>0.023601</td>\n",
       "      <td>0.010460</td>\n",
       "      <td>-0.002510</td>\n",
       "      <td>0.004278</td>\n",
       "      <td>-0.002943</td>\n",
       "      <td>-0.049165</td>\n",
       "      <td>0.046172</td>\n",
       "      <td>-0.013486</td>\n",
       "      <td>0.015024</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.002330</td>\n",
       "      <td>0.056878</td>\n",
       "      <td>0.002634</td>\n",
       "      <td>-0.004705</td>\n",
       "      <td>0.008534</td>\n",
       "      <td>-0.042197</td>\n",
       "      <td>0.002013</td>\n",
       "      <td>-0.007951</td>\n",
       "      <td>0.154878</td>\n",
       "      <td>-0.009995</td>\n",
       "      <td>...</td>\n",
       "      <td>0.007758</td>\n",
       "      <td>0.011442</td>\n",
       "      <td>0.007948</td>\n",
       "      <td>0.003021</td>\n",
       "      <td>-0.010486</td>\n",
       "      <td>0.011671</td>\n",
       "      <td>0.008935</td>\n",
       "      <td>0.053034</td>\n",
       "      <td>-0.005529</td>\n",
       "      <td>0.006963</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.053361</td>\n",
       "      <td>-0.051292</td>\n",
       "      <td>0.009666</td>\n",
       "      <td>-0.020047</td>\n",
       "      <td>0.021912</td>\n",
       "      <td>0.074106</td>\n",
       "      <td>-0.119492</td>\n",
       "      <td>0.030890</td>\n",
       "      <td>-0.254892</td>\n",
       "      <td>-0.003742</td>\n",
       "      <td>...</td>\n",
       "      <td>0.043622</td>\n",
       "      <td>0.017646</td>\n",
       "      <td>0.020078</td>\n",
       "      <td>-0.001580</td>\n",
       "      <td>0.157774</td>\n",
       "      <td>-0.151970</td>\n",
       "      <td>-0.031708</td>\n",
       "      <td>-0.067448</td>\n",
       "      <td>-0.071193</td>\n",
       "      <td>0.147767</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>-0.002693</td>\n",
       "      <td>0.003192</td>\n",
       "      <td>0.145909</td>\n",
       "      <td>-0.016273</td>\n",
       "      <td>-0.070025</td>\n",
       "      <td>-0.004201</td>\n",
       "      <td>-0.037700</td>\n",
       "      <td>-0.201546</td>\n",
       "      <td>0.023522</td>\n",
       "      <td>0.060853</td>\n",
       "      <td>...</td>\n",
       "      <td>0.073351</td>\n",
       "      <td>0.048575</td>\n",
       "      <td>0.031653</td>\n",
       "      <td>-0.016081</td>\n",
       "      <td>0.162789</td>\n",
       "      <td>-0.167970</td>\n",
       "      <td>0.039795</td>\n",
       "      <td>-0.042604</td>\n",
       "      <td>-0.013323</td>\n",
       "      <td>-0.041329</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>-0.009555</td>\n",
       "      <td>0.027553</td>\n",
       "      <td>0.001139</td>\n",
       "      <td>-0.002319</td>\n",
       "      <td>-0.094798</td>\n",
       "      <td>0.052789</td>\n",
       "      <td>-0.051407</td>\n",
       "      <td>0.038571</td>\n",
       "      <td>0.019418</td>\n",
       "      <td>-0.014255</td>\n",
       "      <td>...</td>\n",
       "      <td>0.025719</td>\n",
       "      <td>0.001024</td>\n",
       "      <td>-0.060752</td>\n",
       "      <td>0.048937</td>\n",
       "      <td>0.297402</td>\n",
       "      <td>-0.295957</td>\n",
       "      <td>0.022098</td>\n",
       "      <td>0.021224</td>\n",
       "      <td>0.089283</td>\n",
       "      <td>-0.075553</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0.043007</td>\n",
       "      <td>-0.011797</td>\n",
       "      <td>0.060100</td>\n",
       "      <td>-0.017498</td>\n",
       "      <td>0.046865</td>\n",
       "      <td>-0.065061</td>\n",
       "      <td>0.041712</td>\n",
       "      <td>-0.150205</td>\n",
       "      <td>-0.087185</td>\n",
       "      <td>0.054479</td>\n",
       "      <td>...</td>\n",
       "      <td>0.018163</td>\n",
       "      <td>0.069097</td>\n",
       "      <td>0.074792</td>\n",
       "      <td>0.048207</td>\n",
       "      <td>-0.275725</td>\n",
       "      <td>0.261546</td>\n",
       "      <td>0.012856</td>\n",
       "      <td>-0.062166</td>\n",
       "      <td>-0.204126</td>\n",
       "      <td>0.000227</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0.029092</td>\n",
       "      <td>-0.024740</td>\n",
       "      <td>0.037048</td>\n",
       "      <td>-0.038577</td>\n",
       "      <td>0.008547</td>\n",
       "      <td>-0.062429</td>\n",
       "      <td>0.011384</td>\n",
       "      <td>-0.062001</td>\n",
       "      <td>-0.040888</td>\n",
       "      <td>0.010209</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.099012</td>\n",
       "      <td>-0.098930</td>\n",
       "      <td>-0.100139</td>\n",
       "      <td>-0.051196</td>\n",
       "      <td>-0.027374</td>\n",
       "      <td>0.019160</td>\n",
       "      <td>0.012430</td>\n",
       "      <td>0.006223</td>\n",
       "      <td>0.049249</td>\n",
       "      <td>0.054281</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>-0.001364</td>\n",
       "      <td>0.005069</td>\n",
       "      <td>-0.062351</td>\n",
       "      <td>0.012584</td>\n",
       "      <td>0.038219</td>\n",
       "      <td>0.024011</td>\n",
       "      <td>0.010476</td>\n",
       "      <td>0.096341</td>\n",
       "      <td>-0.028488</td>\n",
       "      <td>-0.055746</td>\n",
       "      <td>...</td>\n",
       "      <td>0.033684</td>\n",
       "      <td>0.037252</td>\n",
       "      <td>0.039325</td>\n",
       "      <td>0.075513</td>\n",
       "      <td>-0.012544</td>\n",
       "      <td>0.014537</td>\n",
       "      <td>-0.033003</td>\n",
       "      <td>0.008577</td>\n",
       "      <td>0.042709</td>\n",
       "      <td>-0.050907</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10 rows × 197 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   ALTERSKATEGORIE_GROB  ANREDE_KZ  FINANZ_MINIMALIST  FINANZ_SPARER  \\\n",
       "0             -0.073994   0.012913          -0.179097       0.103310   \n",
       "1              0.234386   0.035083           0.097835      -0.231714   \n",
       "2              0.014060  -0.347200           0.131662      -0.054966   \n",
       "3              0.002330   0.056878           0.002634      -0.004705   \n",
       "4              0.053361  -0.051292           0.009666      -0.020047   \n",
       "5             -0.002693   0.003192           0.145909      -0.016273   \n",
       "6             -0.009555   0.027553           0.001139      -0.002319   \n",
       "7              0.043007  -0.011797           0.060100      -0.017498   \n",
       "8              0.029092  -0.024740           0.037048      -0.038577   \n",
       "9             -0.001364   0.005069          -0.062351       0.012584   \n",
       "\n",
       "   FINANZ_VORSORGER  FINANZ_ANLEGER  FINANZ_UNAUFFAELLIGER  FINANZ_HAUSBAUER  \\\n",
       "0         -0.075352        0.044877               0.043154          0.143534   \n",
       "1          0.221085       -0.206730              -0.214534          0.078794   \n",
       "2          0.045263       -0.149303              -0.046392         -0.063370   \n",
       "3          0.008534       -0.042197               0.002013         -0.007951   \n",
       "4          0.021912        0.074106              -0.119492          0.030890   \n",
       "5         -0.070025       -0.004201              -0.037700         -0.201546   \n",
       "6         -0.094798        0.052789              -0.051407          0.038571   \n",
       "7          0.046865       -0.065061               0.041712         -0.150205   \n",
       "8          0.008547       -0.062429               0.011384         -0.062001   \n",
       "9          0.038219        0.024011               0.010476          0.096341   \n",
       "\n",
       "   GREEN_AVANTGARDE  HEALTH_TYP       ...         CAMEO_DEU_2015_9B  \\\n",
       "0         -0.094629    0.023892       ...                  0.056096   \n",
       "1          0.002942   -0.054237       ...                  0.000029   \n",
       "2          0.065722   -0.012393       ...                  0.011606   \n",
       "3          0.154878   -0.009995       ...                  0.007758   \n",
       "4         -0.254892   -0.003742       ...                  0.043622   \n",
       "5          0.023522    0.060853       ...                  0.073351   \n",
       "6          0.019418   -0.014255       ...                  0.025719   \n",
       "7         -0.087185    0.054479       ...                  0.018163   \n",
       "8         -0.040888    0.010209       ...                 -0.099012   \n",
       "9         -0.028488   -0.055746       ...                  0.033684   \n",
       "\n",
       "   CAMEO_DEU_2015_9C  CAMEO_DEU_2015_9D  CAMEO_DEU_2015_9E  OST_WEST_KZ_O  \\\n",
       "0           0.057256           0.056194           0.017256       0.043369   \n",
       "1           0.004152           0.009674           0.037417       0.019638   \n",
       "2           0.023601           0.010460          -0.002510       0.004278   \n",
       "3           0.011442           0.007948           0.003021      -0.010486   \n",
       "4           0.017646           0.020078          -0.001580       0.157774   \n",
       "5           0.048575           0.031653          -0.016081       0.162789   \n",
       "6           0.001024          -0.060752           0.048937       0.297402   \n",
       "7           0.069097           0.074792           0.048207      -0.275725   \n",
       "8          -0.098930          -0.100139          -0.051196      -0.027374   \n",
       "9           0.037252           0.039325           0.075513      -0.012544   \n",
       "\n",
       "   OST_WEST_KZ_W  decade_feat  movement_feat  wealth_feat  life_stage_feat  \n",
       "0      -0.041572     0.063535      -0.061829    -0.106033         0.179621  \n",
       "1      -0.017313    -0.239818       0.109778     0.017352         0.047039  \n",
       "2      -0.002943    -0.049165       0.046172    -0.013486         0.015024  \n",
       "3       0.011671     0.008935       0.053034    -0.005529         0.006963  \n",
       "4      -0.151970    -0.031708      -0.067448    -0.071193         0.147767  \n",
       "5      -0.167970     0.039795      -0.042604    -0.013323        -0.041329  \n",
       "6      -0.295957     0.022098       0.021224     0.089283        -0.075553  \n",
       "7       0.261546     0.012856      -0.062166    -0.204126         0.000227  \n",
       "8       0.019160     0.012430       0.006223     0.049249         0.054281  \n",
       "9       0.014537    -0.033003       0.008577     0.042709        -0.050907  \n",
       "\n",
       "[10 rows x 197 columns]"
      ]
     },
     "execution_count": 171,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "map_weights_features[0:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(100, 197)"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "map_weights_features.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Map weights for the first principal component to corresponding feature names\n",
    "# and then print the linked values, sorted by weight.\n",
    "# HINT: Try defining a function here or in a new cell that you can reuse in the\n",
    "# other cells.\n",
    "def get_sorted_list_of_feature_weights(pca, comp_num):\n",
    "    weight_features = pd.DataFrame({'weight': pca.components_[comp_num], 'feature': df_few_nan_data.columns})\n",
    "    return weight_features.sort_values(by = 'weight', ascending = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "sorted_weight_features0 = get_sorted_list_of_feature_weights(pca_selected,0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>feature</th>\n",
       "      <th>weight</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>113</th>\n",
       "      <td>LP_STATUS_GROB_1.0</td>\n",
       "      <td>0.187813</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>55</th>\n",
       "      <td>PLZ8_ANTG3</td>\n",
       "      <td>0.180604</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>196</th>\n",
       "      <td>life_stage_feat</td>\n",
       "      <td>0.179621</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                feature    weight\n",
       "113  LP_STATUS_GROB_1.0  0.187813\n",
       "55           PLZ8_ANTG3  0.180604\n",
       "196     life_stage_feat  0.179621"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sorted_weight_features0[:][:3]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The first principal component is strongly correlated with three of the original variables. The first principal component increases with low-income earners which have Number of 6-10 family houses in the PLZ8 region and have high life stage (e.g: Older Families &  Mature Couples, Elders In Retirement). This suggests that these three criteria vary together. If one increases, then the remaining ones tend to increase as well. \n",
    "\n",
    "This component would follow that communities of people with large ages, big families and not earn a lot of money."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Map weights for the second principal component to corresponding feature names\n",
    "# and then print the linked values, sorted by weight.\n",
    "sorted_weight_features1 = get_sorted_list_of_feature_weights(pca_selected,1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>feature</th>\n",
       "      <th>weight</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>FINANZ_UNAUFFAELLIGER</td>\n",
       "      <td>-0.214534</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>FINANZ_SPARER</td>\n",
       "      <td>-0.231714</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>193</th>\n",
       "      <td>decade_feat</td>\n",
       "      <td>-0.239818</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   feature    weight\n",
       "6    FINANZ_UNAUFFAELLIGER -0.214534\n",
       "3            FINANZ_SPARER -0.231714\n",
       "193            decade_feat -0.239818"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sorted_weight_features1[:][-3:]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The second principal component increases by decreasing decade_feat, FINANZ_SPARER and FINANZ_UNAUFFAELLIGER. This component would follow that communities of people with not very large ages and save a lot of money."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Map weights for the third principal component to corresponding feature names\n",
    "# and then print the linked values, sorted by weight.\n",
    "sorted_weight_features2 = get_sorted_list_of_feature_weights(pca_selected,2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>feature</th>\n",
       "      <th>weight</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>SEMIO_VERT</td>\n",
       "      <td>0.320422</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>SEMIO_FAM</td>\n",
       "      <td>0.263583</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>SEMIO_SOZ</td>\n",
       "      <td>0.256486</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       feature    weight\n",
       "17  SEMIO_VERT  0.320422\n",
       "14   SEMIO_FAM  0.263583\n",
       "13   SEMIO_SOZ  0.256486"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sorted_weight_features2[:][:3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>feature</th>\n",
       "      <th>weight</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>SEMIO_DOM</td>\n",
       "      <td>-0.288186</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>SEMIO_KAEM</td>\n",
       "      <td>-0.318787</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ANREDE_KZ</td>\n",
       "      <td>-0.347200</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       feature    weight\n",
       "23   SEMIO_DOM -0.288186\n",
       "24  SEMIO_KAEM -0.318787\n",
       "1    ANREDE_KZ -0.347200"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sorted_weight_features2[:][-3:]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This component It would follow people who are too independent and individualistic and they don’t think about the importance of a family often enough. It's very related to males with combative attitude which can make them blind to the bad."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 3: Clustering\n",
    "\n",
    "### Step 3.1: Apply Clustering to General Population\n",
    "\n",
    "You've assessed and cleaned the demographics data, then scaled and transformed them. Now, it's time to see how the data clusters in the principal components space. In this substep, you will apply k-means clustering to the dataset and use the average within-cluster distances from each point to their assigned cluster's centroid to decide on a number of clusters to keep.\n",
    "\n",
    "- Use sklearn's [KMeans](http://scikit-learn.org/stable/modules/generated/sklearn.cluster.KMeans.html#sklearn.cluster.KMeans) class to perform k-means clustering on the PCA-transformed data.\n",
    "- Then, compute the average difference from each point to its assigned cluster's center. **Hint**: The KMeans object's `.score()` method might be useful here, but note that in sklearn, scores tend to be defined so that larger is better. Try applying it to a small, toy dataset, or use an internet search to help your understanding.\n",
    "- Perform the above two steps for a number of different cluster counts. You can then see how the average distance decreases with an increasing number of clusters. However, each additional cluster provides a smaller net benefit. Use this fact to select a final number of clusters in which to group the data. **Warning**: because of the large size of the dataset, it can take a long time for the algorithm to resolve. The more clusters to fit, the longer the algorithm will take. You should test for cluster counts through at least 10 clusters to get the full picture, but you shouldn't need to test for a number of clusters above about 30.\n",
    "- Once you've selected a final number of clusters to use, re-fit a KMeans instance to perform the clustering operation. Make sure that you also obtain the cluster assignments for the general demographics data, since you'll be using them in the final Step 3.3."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_kmeans(data, num_cluster):\n",
    "    #instantiate kmeans\n",
    "    kmeans = KMeans(n_clusters=num_cluster, random_state=seed)\n",
    "\n",
    "    # Then fit the model to data using the fit method\n",
    "    model = kmeans.fit(data)\n",
    "    \n",
    "    return model\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(408554, 100)"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "scores = []\n",
    "centers = list(range(1,11))\n",
    "dataset_score = X_pca_selected[np.random.choice(X_pca_selected.shape[0], int(X_pca_selected.shape[0]/2), replace=False), :].copy()\n",
    "dataset_score.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "for center in centers:\n",
    "    kmeans_model = get_kmeans(X_pca_selected, center)\n",
    "    kmeans_score = np.abs(kmeans_model.score(dataset_score))\n",
    "    scores.append(kmeans_score)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f328c8ff5f8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(20, 16))\n",
    "plt.plot(centers, scores, linestyle='--', marker='o', color='b');\n",
    "plt.xlabel('K');\n",
    "plt.ylabel('SSE');\n",
    "plt.title('SSE vs. K');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This plot have the number of centroids on the x-axis, and the absolute value of the score result on the y-axis. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Re-fit the k-means model with the selected number of clusters "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "metadata": {},
   "outputs": [],
   "source": [
    "num_cluster_selected = 9\n",
    "kmeans_model_selected = get_kmeans(X_pca_selected, num_cluster_selected)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Obtain cluster predictions for the general population demographics data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "817108"
      ]
     },
     "execution_count": 174,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "labels_kmeans = kmeans_model_selected.predict(X_pca_selected)\n",
    "len(labels_kmeans)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 8, 3, 6, 8, 8, 8, 1, 8, 5, 0, 8, 5, 8, 8, 1, 8, 4, 4, 1, 8, 8, 6,\n",
       "       8, 1, 5, 4, 1, 4, 1, 5, 3, 8, 1, 5, 7, 8, 8, 8, 3, 5, 8, 8, 0, 4, 5,\n",
       "       7, 4, 1, 4, 6, 4, 4, 5, 4, 3, 3, 1, 0, 5, 5, 6, 3, 7, 4, 2, 4, 6, 3,\n",
       "       1, 1, 7, 8, 4, 0, 7, 2, 3, 8, 8, 1, 1, 3, 3, 6, 2, 5, 6, 5, 2, 3, 1,\n",
       "       3, 7, 6, 5, 3, 1, 8, 1], dtype=int32)"
      ]
     },
     "execution_count": 175,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "labels_kmeans[:100]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_customers_per_cluster(labels, num_cluster):\n",
    "    plt.figure(figsize = (20,num_cluster))\n",
    "    n, bins, patches = plt.hist(labels, bins=num_cluster, edgecolor='white', linewidth=1) # arguments are passed to np.histogram\n",
    "    plt.xlabel(\"Cluster\")\n",
    "    plt.title(\"Number of Customer per cluster\")\n",
    "    plt.xticks([rect.get_x()+ rect.get_width() / 2 for rect in patches], [\"Cluster {}\".format(x) for x in range(num_cluster)])\n",
    "\n",
    "    for rect in patches:\n",
    "        y_value = rect.get_height()\n",
    "        x_value = rect.get_x() + rect.get_width() / 2\n",
    "\n",
    "        space = 5\n",
    "        va = 'bottom'\n",
    "        label = str(int(y_value))\n",
    "\n",
    "        plt.annotate(\n",
    "            label,                      # Use `label` as label\n",
    "            (x_value, y_value),         # Place label at end of the bar\n",
    "            xytext=(0, space),          # Vertically shift label by `space`\n",
    "            textcoords=\"offset points\", # Interpret `xytext` as offset in points\n",
    "            ha='center',                # Horizontally center label\n",
    "            va=va)                      # Vertically align label differently for\n",
    "                                        # positive and negative values.\n",
    "\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f0a8ef3ae80>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_customers_per_cluster(labels_kmeans,num_cluster_selected)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Discussion 3.1: Apply Clustering to General Population\n",
    "\n",
    "I have tested on the general demographics data multiple cluster counts [1,2,..,10]. I decided to segment the population into 9 clusters because the `Elbow method plot` shows that this number of clusters reduces the avg distance from each point to the center of the cluster. At the same time, increasing `k` doesn't appear have a substantial impact."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Step 3.2: Apply All Steps to the Customer Data\n",
    "\n",
    "Now that you have clusters and cluster centers for the general population, it's time to see how the customer data maps on to those clusters. Take care to not confuse this for re-fitting all of the models to the customer data. Instead, you're going to use the fits from the general population to clean, transform, and cluster the customer data. In the last step of the project, you will interpret how the general population fits apply to the customer data.\n",
    "\n",
    "- Don't forget when loading in the customers data, that it is semicolon (`;`) delimited.\n",
    "- Apply the same feature wrangling, selection, and engineering steps to the customer demographics using the `clean_data()` function you created earlier. (You can assume that the customer demographics data has similar meaning behind missing data patterns as the general demographics data.)\n",
    "- Use the sklearn objects from the general demographics data, and apply their transformations to the customers data. That is, you should not be using a `.fit()` or `.fit_transform()` method to re-fit the old objects, nor should you be creating new sklearn objects! Carry the data through the feature scaling, PCA, and clustering steps, obtaining cluster assignments for all of the data in the customer demographics data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(191652, 85)"
      ]
     },
     "execution_count": 178,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Load in the customer demographics data.\n",
    "customers = pd.read_csv('Udacity_CUSTOMERS_Subset.csv',delimiter=';')\n",
    "customers.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Get all the customers data without split its rwos or remove columns from it"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "metadata": {},
   "outputs": [],
   "source": [
    "cust_row_nan_threshold = 0.0 \n",
    "cust_col_nan_threshold = 1.0\n",
    "cust_selected = select_columns_rows(customers, feat_info, cust_row_nan_threshold, cust_col_nan_threshold)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(191652, 85)"
      ]
     },
     "execution_count": 180,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cust_selected.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Process the categorical and mixed features for customer data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "metadata": {},
   "outputs": [],
   "source": [
    "cust_selected_cols = cust_selected[df_few_nan_rows.columns].copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 182,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(191652, 79)"
      ]
     },
     "execution_count": 182,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cust_selected_cols.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 183,
   "metadata": {},
   "outputs": [],
   "source": [
    "cust_selected_data = engineer_features(cust_selected_cols, feat_info)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 184,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(191652, 196)"
      ]
     },
     "execution_count": 184,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cust_selected_data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 185,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['GEBAEUDETYP_5.0']"
      ]
     },
     "execution_count": 185,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "diff_cols = [item for item in df_few_nan_data.columns if item not in cust_selected_data.columns]\n",
    "diff_cols"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 186,
   "metadata": {},
   "outputs": [],
   "source": [
    "cust_selected_data['GEBAEUDETYP_5.0'] = np.nan"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 187,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 187,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "diff_cols2 = [item for item in df_few_nan_data.columns if item not in cust_selected_data.columns]\n",
    "diff_cols2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Impute missing values for customer data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 188,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(191652, 197)"
      ]
     },
     "execution_count": 188,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "imputed_cust = mean_imp.transform(cust_selected_data)\n",
    "imputed_cust.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 189,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n"
     ]
    }
   ],
   "source": [
    "print(np.isnan(imputed_cust).sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Apply Feature Scaling to customer data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 190,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(191652, 197)"
      ]
     },
     "execution_count": 190,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "scaled_cust = standard_scaler.transform(imputed_cust)\n",
    "scaled_cust.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Perform Dimensionality Reduction to customer data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_pca_cust = pca_selected.transform(scaled_cust)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Apply Clustering to customer data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 192,
   "metadata": {},
   "outputs": [],
   "source": [
    "labels_kmeans_cust = kmeans_model_selected.predict(X_pca_cust)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 193,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f0a8eed9ef0>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_customers_per_cluster(labels_kmeans_cust,num_cluster_selected)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Step 3.3: Compare Customer Data to Demographics Data\n",
    "\n",
    "At this point, you have clustered data based on demographics of the general population of Germany, and seen how the customer data for a mail-order sales company maps onto those demographic clusters. In this final substep, you will compare the two cluster distributions to see where the strongest customer base for the company is.\n",
    "\n",
    "Consider the proportion of persons in each cluster for the general population, and the proportions for the customers. If we think the company's customer base to be universal, then the cluster assignment proportions should be fairly similar between the two. If there are only particular segments of the population that are interested in the company's products, then we should see a mismatch from one to the other. If there is a higher proportion of persons in a cluster for the customer data compared to the general population (e.g. 5% of persons are assigned to a cluster for the general population, but 15% of the customer data is closest to that cluster's centroid) then that suggests the people in that cluster to be a target audience for the company. On the other hand, the proportion of the data in a cluster being larger in the general population than the customer data (e.g. only 2% of customers closest to a population centroid that captures 6% of the data) suggests that group of persons to be outside of the target demographics.\n",
    "\n",
    "Take a look at the following points in this step:\n",
    "\n",
    "- Compute the proportion of data points in each cluster for the general population and the customer data. Visualizations will be useful here: both for the individual dataset proportions, but also to visualize the ratios in cluster representation between groups. Seaborn's [`countplot()`](https://seaborn.pydata.org/generated/seaborn.countplot.html) or [`barplot()`](https://seaborn.pydata.org/generated/seaborn.barplot.html) function could be handy.\n",
    "  - Recall the analysis you performed in step 1.1.3 of the project, where you separated out certain data points from the dataset if they had more than a specified threshold of missing values. If you found that this group was qualitatively different from the main bulk of the data, you should treat this as an additional data cluster in this analysis. Make sure that you account for the number of data points in this subset, for both the general population and customer datasets, when making your computations!\n",
    "- Which cluster or clusters are overrepresented in the customer dataset compared to the general population? Select at least one such cluster and infer what kind of people might be represented by that cluster. Use the principal component interpretations from step 2.3 or look at additional components to help you make this inference. Alternatively, you can use the `.inverse_transform()` method of the PCA and StandardScaler objects to transform centroids back to the original data space and interpret the retrieved values directly.\n",
    "- Perform a similar investigation for the underrepresented clusters. Which cluster or clusters are underrepresented in the customer dataset compared to the general population, and what kinds of people are typified by these clusters?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 194,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "817108"
      ]
     },
     "execution_count": 194,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "num_popul = len(labels_kmeans)\n",
    "num_popul"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "191652"
      ]
     },
     "execution_count": 195,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "num_cust = len(labels_kmeans_cust)\n",
    "num_cust"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Get the proportion of persons en each cluster for general population and customer data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 196,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "popul_dict {0: 0.033805812695506594, 1: 0.11834420908863945, 2: 0.043651512407172612, 3: 0.15057373076753625, 4: 0.15558041287075883, 5: 0.14083695178605521, 6: 0.13787773464462469, 7: 0.10021074325548153, 8: 0.11911889248422484}\n",
      "cust_dict {0: 0.0011687850896416421, 1: 0.67295410431406921, 2: 0.043912925510821696, 3: 0.0042472815311084674, 4: 0.00083484649260117294, 5: 0.021585999624319077, 6: 0.011526099388474945, 7: 0.017020432867906415, 8: 0.22674952518105734}\n"
     ]
    }
   ],
   "source": [
    "unique_popul, counts_popul = np.unique(labels_kmeans, return_counts=True)\n",
    "popul_dict = dict(zip(unique_popul, counts_popul/num_popul))\n",
    "print('popul_dict',popul_dict)\n",
    "unique_cust, counts_cust = np.unique(labels_kmeans_cust, return_counts=True)\n",
    "cust_dict = dict(zip(unique_cust, counts_cust/num_cust))\n",
    "print('cust_dict',cust_dict)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 197,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.0011687850896416421,\n",
       " 0.67295410431406921,\n",
       " 0.043912925510821696,\n",
       " 0.0042472815311084674,\n",
       " 0.00083484649260117294,\n",
       " 0.021585999624319077,\n",
       " 0.011526099388474945,\n",
       " 0.017020432867906415,\n",
       " 0.22674952518105734]"
      ]
     },
     "execution_count": 197,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cust_clusters_dist = list(cust_dict.values())\n",
    "cust_clusters_dist"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 198,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0"
      ]
     },
     "execution_count": 198,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sum(cust_clusters_dist)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 199,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.033805812695506594,\n",
       " 0.11834420908863945,\n",
       " 0.043651512407172612,\n",
       " 0.15057373076753625,\n",
       " 0.15558041287075883,\n",
       " 0.14083695178605521,\n",
       " 0.13787773464462469,\n",
       " 0.10021074325548153,\n",
       " 0.11911889248422484]"
      ]
     },
     "execution_count": 199,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "popul_clusters_dist = list(popul_dict.values())\n",
    "popul_clusters_dist"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 200,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0"
      ]
     },
     "execution_count": 200,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sum(popul_clusters_dist)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 201,
   "metadata": {},
   "outputs": [],
   "source": [
    "kmeans_labels_compare = pd.DataFrame({'popul_clusters': popul_clusters_dist, 'cust_cluster': cust_clusters_dist})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 202,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cust_cluster</th>\n",
       "      <th>popul_clusters</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.001169</td>\n",
       "      <td>0.033806</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.672954</td>\n",
       "      <td>0.118344</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.043913</td>\n",
       "      <td>0.043652</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.004247</td>\n",
       "      <td>0.150574</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.000835</td>\n",
       "      <td>0.155580</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.021586</td>\n",
       "      <td>0.140837</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0.011526</td>\n",
       "      <td>0.137878</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0.017020</td>\n",
       "      <td>0.100211</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0.226750</td>\n",
       "      <td>0.119119</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   cust_cluster  popul_clusters\n",
       "0      0.001169        0.033806\n",
       "1      0.672954        0.118344\n",
       "2      0.043913        0.043652\n",
       "3      0.004247        0.150574\n",
       "4      0.000835        0.155580\n",
       "5      0.021586        0.140837\n",
       "6      0.011526        0.137878\n",
       "7      0.017020        0.100211\n",
       "8      0.226750        0.119119"
      ]
     },
     "execution_count": 202,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "kmeans_labels_compare"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Get clusters that are overrepresented in the customer data compared to the general population"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 203,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cust_cluster</th>\n",
       "      <th>popul_clusters</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.672954</td>\n",
       "      <td>0.118344</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.043913</td>\n",
       "      <td>0.043652</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0.226750</td>\n",
       "      <td>0.119119</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   cust_cluster  popul_clusters\n",
       "1      0.672954        0.118344\n",
       "2      0.043913        0.043652\n",
       "8      0.226750        0.119119"
      ]
     },
     "execution_count": 203,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "kmeans_labels_compare[kmeans_labels_compare['cust_cluster'] > kmeans_labels_compare['popul_clusters']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Apply preprocessing, feature transformation, and clustering from the general\n",
    "# demographics onto the customer data, obtaining cluster predictions for the\n",
    "# customer demographics data.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Compare the proportion of data in each cluster for the customer data to the\n",
    "# proportion of data in each cluster for the general population.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# What kinds of people are part of a cluster that is overrepresented in the\n",
    "# customer data compared to the general population?\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Treat the dataset data which had more than a specified threshold of missing values as an additional data cluster "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 204,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(74113, 197)"
      ]
     },
     "execution_count": 204,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_lot_nan_data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 205,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(74113, 197)"
      ]
     },
     "execution_count": 205,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "imputed_lot_nan_data = mean_imp.transform(df_lot_nan_data)\n",
    "imputed_lot_nan_data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 206,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n"
     ]
    }
   ],
   "source": [
    "print(np.isnan(imputed_lot_nan_data).sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 207,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(74113, 197)"
      ]
     },
     "execution_count": 207,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "scaled_lot_nan_data = standard_scaler.transform(imputed_lot_nan_data)\n",
    "scaled_lot_nan_data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 208,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_pca_lot_nan_data = pca_selected.transform(scaled_lot_nan_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 209,
   "metadata": {},
   "outputs": [],
   "source": [
    "labels_kmeans_lot_nan_data = kmeans_model_selected.predict(X_pca_lot_nan_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 210,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f0a8ef424e0>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_customers_per_cluster(labels_kmeans_lot_nan_data,num_cluster_selected)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Get the general population data of the persons within cluster1 that is overrepresented in the customer data compared to the general population which had less than a specified threshold of missing values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 256,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_pca_popul_analys = X_pca_selected.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 257,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_pca_popul_analys_orig1 = pca_selected.inverse_transform(X_pca_popul_analys)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 258,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(817108, 197)"
      ]
     },
     "execution_count": 258,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_pca_popul_analys_orig1.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 259,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_pca_popul_analys_orig2 = standard_scaler.inverse_transform(X_pca_popul_analys_orig1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 260,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(817108, 197)"
      ]
     },
     "execution_count": 260,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_pca_popul_analys_orig2.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 261,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_pca_popul_analys_orig3 = pd.DataFrame(X_pca_popul_analys_orig2,columns=df_few_nan_data.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 262,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_pca_popul_analys_orig3['cluster'] = labels_kmeans"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 263,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(817108, 198)"
      ]
     },
     "execution_count": 263,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_pca_popul_analys_orig3.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 264,
   "metadata": {},
   "outputs": [],
   "source": [
    "cluster1_popul_data = X_pca_popul_analys_orig3[X_pca_popul_analys_orig3['cluster'] == 1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 265,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(96700, 198)"
      ]
     },
     "execution_count": 265,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cluster1_popul_data.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Get some features to infer the persons within a specific cluster"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 285,
   "metadata": {},
   "outputs": [],
   "source": [
    "analys_feat = ['FINANZ_MINIMALIST', 'FINANZ_SPARER', 'FINANZ_HAUSBAUER', 'ALTERSKATEGORIE_GROB', 'movement_feat', 'wealth_feat']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 286,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_analy_feat(df, features_list):\n",
    "    for f in features_list:\n",
    "        sns.distplot(df[f], kde=False, bins=6)\n",
    "        plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 287,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f0a8e9a5eb8>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f0a8e8a9198>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f0a8eec3358>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f0a8ef4b2b0>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f0a8eebf5c0>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f0a8ef54438>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_analy_feat(cluster1_popul_data, analys_feat)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "By interpreting some original features, we can see that the population within cluster 1 is characterized by: \n",
    "    1. ALTERSKATEGORIE_GROB: Estimated age is between 46 and 60.\n",
    "    2. HAUSBAUER: home ownership is high.\n",
    "    3. SPARER: money-saver is very high.\n",
    "    4. MINIMALIST: low financial interest rate is very low.\n",
    "    5. movement_feat: The ideas, attitudes, or activities that are regarded as normal or conventional.\n",
    "    6. wealth_feat : Less Affluent Households."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Get the general population data of the persons within cluster2 that is underrepresented in the customer data compared to the general population of the dataset which had more than a specified threshold of missing values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 241,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(74113, 197)"
      ]
     },
     "execution_count": 241,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_pca_lot_analys = X_pca_lot_nan_data.copy()\n",
    "X_pca_lot_analys_orig1 = pca_selected.inverse_transform(X_pca_lot_analys)\n",
    "X_pca_lot_analys_orig1.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 243,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(74113, 197)"
      ]
     },
     "execution_count": 243,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_pca_lot_analys_orig2 = standard_scaler.inverse_transform(X_pca_lot_analys_orig1)\n",
    "X_pca_lot_analys_orig2.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 244,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(74113, 198)"
      ]
     },
     "execution_count": 244,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_pca_lot_analys_orig3 = pd.DataFrame(X_pca_lot_analys_orig2,columns=df_lot_nan_data.columns)\n",
    "X_pca_lot_analys_orig3['cluster'] = labels_kmeans_lot_nan_data\n",
    "X_pca_lot_analys_orig3.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 245,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(73298, 198)"
      ]
     },
     "execution_count": 245,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cluster2_lot_data = X_pca_lot_analys_orig3[X_pca_lot_analys_orig3['cluster'] == 2]\n",
    "cluster2_lot_data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 288,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f0a8e9868d0>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f0a8eda0208>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f0a8ef949b0>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f0a8eebe128>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f0a8ef941d0>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f0a8eee0080>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_analy_feat(cluster2_lot_data, analys_feat)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "By interpreting some original features, we can see that the population within cluster 2 is characterized by: \n",
    "    1. ALTERSKATEGORIE_GROB: Estimated age is between 30 and 46.\n",
    "    2. HAUSBAUER: home ownership is high.\n",
    "    3. SPARER: money-saver is between average and low.\n",
    "    4. MINIMALIST: low financial interest rate is high.\n",
    "    5. movement_feat: The ideas, attitudes, or activities are regarded as new and unusual.\n",
    "    6. wealth_feat : unknown or Poorer Households."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> Congratulations on making it this far in the project! Before you finish, make sure to check through the entire notebook from top to bottom to make sure that your analysis follows a logical flow and all of your findings are documented in **Discussion** cells. Once you've checked over all of your work, you should export the notebook as an HTML document to submit for evaluation. You can do this from the menu, navigating to **File -> Download as -> HTML (.html)**. You will submit both that document and this notebook for your project submission."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
